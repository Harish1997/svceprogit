package svce.svcepro;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.LabeledIntent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.Toast;

import java.util.ArrayList;

/**
 * Created by harishananth on 17/09/16.
 */
public class ttperiod extends Activity {
    ListView listView;


    String[] fautoonemonday = {"1-Engineering Practices Lab", "2-Engineering Practices Lab", "3-Engineering Practices Lab", "4-Computer Programming", "5-Engineering Physics I", "6-Technical English I", "7-Maths I"};
    String[] fautoonetuesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Engineering Physics I", "5-Computer Programming", "6-Technical English I", "7-Engineering Chemistry I"};
    String[] fautoonewednesday = {"1-Engineering Physics I", "2-Maths", "3-Engineering Chemistry", "4-Maths", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fautoonethursday = {"1-Maths", "2-Physics/Chemistry Lab", "3-Physics/Chemistry Lab", "4-Chemistry I", "5-English I", "6-Maths I", "7-Computer Programming", "8-Sports"};
    String[] fautoonefriday = {"1-Computer Programming", "2-Physics I", "3-English", "4-Chemistry", "5-Computer Lab", "6-Computer Lab", "7-Computer Lab"};

    String[] fbiotechonemonday = {"1-Computer Programming", "2-Physics I", "3-English I", "4-Maths I", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fbiotechonetuesday = {"1-Engineering Physics I", "2-Engineering Chemistry I", "3-Technical English I", "4-Computer Programming", "5-Engineering Practices Lab", "6-Engineering Practices Lab", "7-Engineering Practices Lab"};
    String[] fbiotechonewednesday = {"1-Technical English I", "2-Maths I", "3-Computer Programming", "4-Chemistry I", "5-Physics I", "6-Physics/Chemistry Lab", "7-Physics/Chemistry Lab"};
    String[] fbiotechonethursday = {"1-Maths I", "2-Chemistry I", "3-Physics I", "4-English", "5-Computer Programming Lab", "6-Computer Programming Lab", "7-Computer Programming Lab"};
    String[] fbiotechonefriday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Chemistry I", "5-Maths I", "6-Computer Programming", "7-Maths  I"};

    String[] fcivilonemonday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Mathematics-I", "5-Technical English-I", "6-Engineering Physics", "7-Engineering Chemistry"};
    String[] fcivilonetuesday = {"1-Computer Programming", "2-Engienering Chemistry", "3-Mathematics-I", "4-Computer Programming", "5-Mathematics-I", "6-Engieering Physics-I", "7-Technical English-I"};
    String[] fcivilonewednesday = {"1-Technical English-I", "2-Mathematics-I", "3-Engineering Physics", "4-Engieering Chemistry", "5-Computer Practise Lab", "6-Computer Pracise Lab", "7-Computer Practise Lab"};
    String[] fcivilonethursday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Engineering Chemistry", "5-Computer Programming", "6-Physics/Chemistry Lab,'7-Physics/Chemistry Lab"};
    String[] fcivilonefriday = {"1-Engineering Practise Lab", "2-Engineering Practise Lab", "3-Engineering Practise Lab", "4-Mathematics-I", "5-Engineering Physics-I", "6-Technical English-I", "7-Computer Programming"};

    String[] fchemaonemonday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Chemistry I", "5-Maths I", "6-Chemistry", "7-Computer Programming"};
    String[] fchemaonetuesday = {"1-Physics I", "2-Maths I", "3-English I", "4-Computer Programming", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fchemaonewednesday = {"1-Computer Programming Lab", "2-Computer Programming Lab", "3-Computer Programming Lab", "4-Computer Programming", "5-English I", "6-Physics I", "7-Maths I"};
    String[] fchemaonethursday = {"1-Engineering Practices Lab", "2-Engineering Practices Lab", "3-Engineering Practices Lab", "4-Chemistry I", "5-Physics I", "6-Maths I", "7-English I"};
    String[] fchemaonefriday = {"1-Computer Programming", "2-Maths I", "3-Physics I", "4-English I", "5-Chemistry I", "6-Physics/Chmeistry Lab", "7-Physics/Chemistry Lab"};

    String[] fchembonemonday = {"1-Physics I", "2-Chemistry I", "3-Computer Programming", "4-Physics/Chemistry Lab", "5-Physics/Chemistry Lab", "6-Maths I", "7-Physics I"};
    String[] fchembonetuesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Computer Programming", "5-ENglish I", "6-Chemistry I", "7-Maths I"};
    String[] fchembonewednesday = {"1-English I", "2-Computer Programming", "3-Maths I", "4-Physcis I", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fchembonethursday = {"1-Computer Programming", "2-Computer Programming", "3-Computer Programming", "4-Maths I", "5-English I", "6-Chemistry I", "7-English I"};
    String[] fchembonefriday = {"1-Maths I", "2-Chemistry I", "3-Physcis I", "4-Computer Programming", "5-Engineering Practices Lab", "6-Engineering Practices Lab", "7-Engineering Practices Lab"};


    String[] fcseaonemonday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Computer Programming", "5-English I", "6-Maths I", "7-Physcis I"};
    String[] fcseaonetuesday = {"1-English I", "2-Chemistry I", "3-Physcis I", "4-English I", "5-ENgineering Graphics", "6-ENgineering Graphics", "7-Engineering Graphics"};
    String[] fcseaonewednesday = {"1-Computer Programming", "2-Computer Programming", "3-Computer Programming", "4-Maths I", "5-English I", "6-Chemistry I", "7-Computer Programming"};
    String[] fcseaonethursday = {"1-Maths I", "2-Physics I", "3-Maths I", "4-Physics/Chemistry Lab", "5-Physics/Chemistry Lab", "6-Computer Programming", "7-Physics I"};
    String[] fcseaonefriday = {"1-Engineering Practices Lab", "2-Engineering Practices Lab", "3-Engineering Practices Lab", "4-Computer Programming", "5-Chemistry I", "6-Physics I", "7-Maths I"};

    String[] fcsebonemonday = {"1.Computer Programming", "2.maths", "3.Physics", "4.english", "5.Engineering Practices Lab", "6.Engineering Practices Lab", "7.Engineering Practices Lab"};
    String[] fcsebonetuesday = {"1.Engineering Graphics", "2.Engineering Graphics", "3.Engineering Graphics", "4.Physics/Chemistry Lab", "5.Physics/Chemistry Lab", "6.maths", "7.English"};
    String[] fcsebonewednesday = {"1.Physics", "2.Chemsitry", "3.Computer Programming", "4.Chemsitry", "5.Engineering Graphics", "6.Engineering Graphics", "7.Engineering Graphics"};
    String[] fcsebonethursday = {"1.Computer Programming Lab", "2.Computer Programming Lab", "3.Computer Programming Lab", "4.Maths", "5.English", "6.Chemistry", "7.Computer Programming"};
    String[] fcsebonefriday = {"1.Physics", "2.English", "3.Maths", "4.Physics", "5.Maths", "6.Chemsitry", "7.Computer Programming"};


    String[] fcseconemonday = {"1.Maths", "2.Physics", "3.Chemistry", "4.Physics/Chemistry Lab", "5.Physics/Chemsitry Lab", "6.English", "7.Computer Programming"};
    String[] fcseconetuesday = {"1.Chemistry", "2.Computer Programming", "3.Physics", "4.Maths", "5.Computer Programming Lab", "6.Computer Programming Lab", "7.Computer Programming Lab"};
    String[] fcseconewednesday = {"1.Engineering Graphics", "2.Engineering Graphics", "3.Engineering Graphics", "4.Maths", "5.Engineering Practices Lab", "6.Engineering Practices Lab", "7.Engineering Practices Lab"};
    String[] fcseconethursday = {"1.Computer Programming", "2.English", "3.Physics", "4.Chemistry", "5.Engineering Graphics", "6.Engineering Graphics", "7.Engineering Graphics"};
    String[] fcseconefriday = {"1.Physics", "2.Maths", "3.Chemistry", "4.Computer Programming", "5.English", "6.Maths", "7.English"};

    String[] feceaonemonday = {"1.Chemistry", "2.Maths", "3.Physics", "4.Computer Programming", "5.Engineering Practices Lab", "6.Engineering Practices Lab", "7.Engineering Practices Lab"};
    String[] feceaonetuesday = {"1.Computer Programming Lab", "2.Computer Programming Lab", "3.Computer Programming Lab", "4.Maths", "5.Physics", "6.English", "7.Computer Programming"};
    String[] feceaonewednesday = {"1.Computer Programming", "2.Chemistry", "3.English", "4.Physics/Chemistry Lab", "5.Physics/Chemistry Lab", "6.Physics", "7.Maths"};
    String[] feceaonethursay = {"1.Engineering Graphics", "2.Engineering Graphics", "3.Engineering Graphics", "4.Physics", "5.Chemistry", "6.Maths", "7.English"};
    String[] feceaonefriday = {"1.English", "2.Maths", "3.Chemistry", "4.Computer Programming", "5.Engineering Graphics", "6.Engineering Graphics", "7.Engineering Graphics"};

    String[] fecebonemonday = {"1.Computer Programming", "2.Maths", "3.English", "4.Physics", "5.Engineering Graphics", "6.Engineering Graphics", "7.Engineering Graphics"};
    String[] fecebonetuesday = {"1.Engineering Practices Lab", "2.Engineering Practices Lab", "3.Engineering Practices Lab", "4.Chemistry", "5.Maths", "6.Chemistry", "7.English"};
    String[] fecebonewednesday = {"1.English", "2.Physics", "3.Maths", "4.Computer Programming", "5.Maths", "6.Physics/Chemistry Lab", "7.Physics/Chemistry Lab"};
    String[] fecebonethursday = {"1.Computer Programming Lab", "2.Computer Programming Lab", "3.Computer Programming Lab", "4.English", "5.Physics", "6.Chemistry", "7.Computer Programming"};
    String[] fecebonefriday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Computer Programming", "5-Chemistry-1", "6-Physics-1", "7-Mathematics-1"};

    String[] fececonemonday = {"1.Engineering Graphics", "2.Engineering Graphics", "3.Engineering Graphics", "4.Maths", "5.Physics", "6.English", "7.Chemistry"};
    String[] fececonetuesday = {"1.Computer Programming", "2.Maths", "3.Chemistry", "4.Maths", "5.Engineering Graphics", "6.Engineering Graphics", "7.Engineering Graphics"};
    String[] fececonewednesday = {"1.Physics", "2.Physics/Chemistry Lab", "3.Physics/Chemistry Lab", "4.Chemistry", "5.English", "6.Maths", "7.Chemistry"};
    String[] fececonethursday = {"1.Engineering Practices Lab", "2.Engineering Practices Lab", "3.Engineering Practices Lab2", "4.English", "5.Computer Programming", "6.Physics", "7.Computer Programming"};
    String[] fececonefriday = {"1.Computer Practise Lab", "2.Computer Practise Lab", "3.Computer Practise Lab", "4.Physics", "5.Computer Programming", "6.English", "7.Maths"};

    String[] feeeaonemonday = {"1-Computer Programming", "2-Technical English-I", "3-Engineering Chemistry-I", "4-Engineering Physics-I", "5-Computer Programming", "6-Physics/Chemistry Lab"};
    String[] feeeaonetuesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Technical English", "5-Engineering Physics-I", "6-Mathematics-I", "7-Engineering Chemistry"};
    String[] feeeaonewednesday = {"1-Engineering Physics-I", "2-Computer Programming", "3-Mathematics-I", "4-Mathematics-I", "5-Engineering Graphics", "6-Engineering Grpahics", "7-Engineering Graphics"};
    String[] feeeaonethursday = {"1-Engineering Chemistry-I", "2-Mathematics-I", "3-Engineering Physics-I", "4-Computer programming", "5-Engineering Practise Lab", "6-Engineering Practise Lab", "7-Engineering Practise Lab"};
    String[] feeeaonefriday = {"1-Technical English", "2-Mathematics-I", "3-Engineering Chemistry-I", "4-Technical English", "5-Computer Practise Lab", "6-Computer Practise Lab", "7-Computer Practise Lab"};

    String[] feeebonemonday = {"1-Computer Programming", "2-Mathematics-I", "3-Engineering Physics-I", "4-Technical English", "5-Computer Practise lab", "6-Computer Practise Lab", "7-Computer Practise Lab"};
    String[] feeebonetuesday = {"1-Engineering Physics-I", "2-Engineering Chemistry-I", "3-Mathematics-I", "4-Computer Programming", "5-Engineering Practise Lab", "6-Engineering Practise Lab", "7-Engineering Practise Lab"};
    String[] feeebonewednesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Computer Programming", "5-Mathematics-I", "6-Technical English-I ", "7-Engineering Physics-I"};
    String[] feeebonethursday = {"1-Mathematics-I", "2-Technical English-I", "3-Computer Programming", "4-Engineering Chemistry-I", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] feeebonefriday = {"1-Engineering Physics-I", "2-Engineering Chemistry-I", "3-Technical English", "4-Physics/Chemistry Lab", "5-Physics/Chemistry Lab", "6-Engineering Chemistry-I", "Mathematics-I"};

    String[] fitaonemonday = {"1-Engineering Chemistry-I", "2-Technical English-I", "3-Computer Programming", "4.Engineering Physics-I", "5-Mathematics-I", "6-Physics/Chemistry Lab", "7-Physics/Chemistry Lab"};
    String[] fitaonetuesday = {"1-Computer Practise Lab", "2-Computer Practise Lab", "3-Computer Practise Lab", "4-Mathematics-I", "5-Engineering Physics-I", "Technical English-I", "COmputer Programming"};
    String[] fitaonewednesday = {"1-Engineering Practise Lab", "2-Engineering Practise Lab", "3-Engineering Practise Lab", "4-Engineering Chemistry-I", "5-Engeering Physics-I", "6-Engeering Chemistry-I", "Mathematics-I"};
    String[] fitaonethursday = {"1-Engeering Graphics", "2-Engeering Graphics", "3-Engeering Graphics", "4-Technical English", "5-Mathematics-I", "6-Computer Programming", "7-Technical English-I"};
    String[] fitaonefriday = {"1-Engeering Chemistry-I", "2-COmputer Programming", "3-Engeering Physics-I", "4-Mathematics-I", "5-Engeering Graphics", "6-Engeering Graphics", "7-Engeering Graphics"};

    String[] fitbonemonday = {"1-Engineering Physics-I", "2-Technical english-I", "3-Computer Programming", "4-Mathematics-I", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fitbonetuesday = {"1-Engineerng Practise Lab", "2-Engineering Practise Lab", "3-Engineering Practise Lab", "4-Computer Programming", "5-Chemistry-1", "6-Mathematics-1", "7-Physics-1"};
    String[] fitbonewednesday = {"1-Engineering CHemistry", "2-Mathematics-I", "3-Technical English", "4-Mathematics-I", "5-Computer Practise Lab", "6-Computer Practise Lab", "7-Computer Practise Lab"};
    String[] fitbonethursday = {"1-Techncail English-I", "2-Computer Programming", "3-Technical English", "4-Mathematics-I", "5-Engineering Chemistry", "6-Engineering Physics", "7-Computer Programming"};
    String[] fitbonefriday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Engineering Physics-I", "5-Engineering Chemistry", "6-Physics/Chemistry Lab"};

    String[] fmechaonemonday = {"1-Engineering Practise Lab", "2-Engineering Practise Lab", "3-Engineering Practise Lab", "4-Technical English", "5-Engineering Chemistry", "6-Engineering Physcis", "7-Mathematics"};
    String[] fmechaonetuesday = {"1-Computer Programming", "2-Technical English", "3-Mathematics_I", "4-Engineering Physics", "5-Computer Practise Lab", "6-Computer Practise Lab", "7-Computer Practise Lab"};
    String[] fmechaonewednesday = {"1-Engineering Graphics", "2-Engineering Graphics", "3-Engineering Graphics", "4-Engineering Physics-I", "5-Technical English", "6-Mathematics-I", "7-Engineering Chemistry"};
    String[] fmechaonethursday = {"1-Engineering Physics", "2-Engineering Chemistry", "3-Mathematics", "4-Computer Programming", "5-Engineering Graphics", "6-Engineering Graphics", "7-Engineering Graphics"};
    String[] fmechaonefriday = {"1-Mathematics-I", "2-Physics/Chemistry Lab", "3-Physics/Chemistry Lab", "4-Computer Programming", "5-Engineering Chemistry", "6-Technical English", "7-Computer Programming"};

    String[] fmechbonemonday = {"1-Technical English", "2-Engineering Chemistry-I", "3-Computer Programming", "4-Mathematics-I", "5-Computer Practise Lab", "6-Computer Practise Lab", "7-Computer Practose Lab"};
    String[] fmechbonetuesday = {"1-Mathematics-I", "2-Engineering Chemistry-I", "3-Mathematics-I", "4-Engineering Chemistry-I", "5-technical English-I", "6-Physics/Chemistry Lab", "7-Physics/Chemistry Lab"};
    String[] fmechbonewednesday = {"1-Engineering Chemistry", "2-Technical English-I", "3-Engineering Physics-I", "4-Mathematics-I", "5-Engineerign Practise Lab", "6-Engineering Practise Lab", "7-Engineering Practise Lab"};
    String[] fmechbonethursday = {"1-Engineering Graphics", "2-Engineering graphics", "3-Engineering graphics", "4-Engineering Physics-I", "5-COmputer Programming", "6-Engineering Physics-I", "7-Engieering Chemistry-I"};
    String[] fmechbonefriday = {"1-Computer Programming", "2-Technical English", "3-Computer Programming", "4-Mathematics-I", "5-Engineering graphics", "6-Engineering Graphics", "7-Engineering Graphics"};

    //first yr auto
    String[] fautotwomonday = {"1-Mathematics II", "2-Engineering Mechanics", "3-BEEE", "4-Technical English II", "5-Engineering mechanics/Mathematics II", "6-Engineering Chemistry II", "7-Engineering Physics II"};
    String[] fautotwotuesday = {"1-CAD/CAM Lab", "2-CAD/CAM Lab", "3-CAD/CAM Lab", "4-Mathemaatics II", "5-Technical English II", "6-Engineering Mechanics", "7-BEEE"};
    String[] fautotwowednesday = {"1-Technical English II", "2-Mathematics II", "3-Engineering mechanics", "4-Engineering Physics II", "5-Engineering chemistry II", "6-BEEE", "7-Library"};
    String[] fautotwothursday = {"1-BEEE", "2-Engineering Chemistry II", "3-Mathematics II", "4-Engineering mechanics", "5-BEEE", "6-Engineering physics II", "7-Technical English II"};
    String[] fautotwofriday = {"1-Phy and Chem lab II", "2-Phy and Chem lab II", "3-Phy and Chem lab II", "4-Mathematics II", "5-Engineering Physics II", "6-Engineering chemistry II", "7-Engineering mechanics"};


    //second year auto
    String[] sautotwomonday = {"1-Automotive Chassis", "2-Computer Aided Machine Drawing Laboratory/Strength of Materials Laboratory", "3-Computer Aided Machine Drawing Laboratory/Strength of Materials Laboratory", "4-Computer Aided Machine Drawing Laboratory/Strength of Materials Laboratory", "5-Electronics and Microprocessors", "6-Engineering Materials and Metallurgy", "7-Statistics and numerical methods"};
    String[] sautotwotuesday = {"1-Electronics and microprocessors", "2-Applied thermodynamics and heat transfer", "3-Statistics and numerical methods", "4-Strength of materials", "5-Automotive Chassis", "6-Statistics and numerical methods", "7-Electronics and microprocessors "};
    String[] sautotwowednesday = {"1-Strength of materials", "2-Electronics and microprocessors", "3-Applied thermodynamics and heat transfer", "4-Statistics ans numerical methods", "5-Electronics and microprocessors lab/Computer aided machine drawing lab", "Electronics and microprocessors lab/Computer aided machine drawing lab", "Electronics and microprocessors lab/Computer aided machine drawing lab"};
    String[] sautotwothursday = {"1-Statistics and numerical methods", "2-Strength of materials", "3-Automotive Chassis/Engineering materials and metallurgy", "4-Applied thermodynamics and heat transfer", "5-Strength of materials lab/Electronics and microprocessors lab", "6-Strength of materials lab/Electronics and microprocessors lab", "7-Strength of materials lab/Electronics and microprocessors lab"};
    String[] sautotwofriday = {"1-Engineering materials and metallurgy", "2-Applied thermodynamics and heat transfer", "3-Automotive Chassis", "4-Electronics and microprocessors", "5-Strength of materials", "6-Statistics and numerical methods", "7-Applied thermodynamics and heat transfer"};

    //third year auto
    String[] tautotwomonday = {"1-Vehicle dynamics", "2-Automotive Chassis components design", "3-Principles of management", "4-Two and three wheelers", "5-Automotive engine components design", "6-Alternative fuels and energy system", "7-Seminar"};
    String[] tautotwotuesday = {"1-Principle of management", "2-Alternative fuels and energy system", "3-Two and three wheelers", "4-library", "5-Principle of management", "6-Automotive Chassis components design", "7-placement 1"};
    String[] tautotwowednesday = {"1-Automotive engine components design", "2-Vehicle dynamics", "3-automotive chassis components design", "4-Principle of management", "5-Two and three wheelers", "6-placement 2", "7-placement 3"};
    String[] tautotwothursday = {"1-Automotive chassis components design", "2-Automotive engine components design", "3-Vehicle Dynamics","4-Alternative fuel and energy system", "5-Computer aided engine and chassis design lab/Two and three wheelers lab", "6-Computer aided engine and chassis design lab/Two and three wheelers lab", "7-Computer aided engine and chassis design lab/Two and three wheelers lab"};
    String[] tautotwofriday = {"1-Automotive chassis components design", "2-Two and three wheelers", "3-automotive engine components design", "4-Vehicle dynamics", "5-Computer aided engine and chassis design lab/Two and three wheelers lab", "6-Computer aided engine and chassis design lab/Two and three wheelers lab", "7-Computer aided engine and chassis design lab/Two and three wheelers lab"};

    //fourth year auto
    String[] frautotwomonday = {"1-Vehicle body engineering", "2-Transport management", "3-Placement", "4-Transport management", "5-Vehicle body design", "6-Project work(1)", "7-Project work(1)"};
    String[] frautotwotuesday = {"1-transport management", "2-Vehicle body engineering", "3-Transport management", "4-Vehicle body engineering", "5-Project work(2)", "6-Project work(2)", "7-library"};
    String[] frautotwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frautotwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frautotwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};

  // ****odd sem of 2nd year 3rd and 4th year of automobile

    String[] sautoonemonday = {"1-Engineering Materials and Metallurgy", "2-Mechanics of SolidsI(Tutorial)", "3-Manufacturing Technology", "4-Engineering Thermodynamics", "5-Mathematics III", "6-Automotive Engines", "7-Engineering Thermodynamics/Mechanics of Solids"};
    String[] sautoonetuesday = {"1-Manufacturing Technology", "2-Strength of Materials lab/Manufacturing Technology lab", "3-Strength of Materials lab/Manufacturing Technology lab", "4-Strength of Materials lab/Manufacturing Technology lab", "5-Mathematics III", "6-Engineering Thermodynamics/Mechanics of Solids", "7-Engineering Materials and Metallurgy"};
    String[] sautoonewednesday = {"1-Automotive Engines", "2-Engineering Thermodynamics/Mechanics of Solids", "3-Mathematics III", "4-Mechanics of Solids", "5-Manufacturing Technology lab/Engine Performance and Emission Testing lab", "Manufacturing Technology lab/Engine Performance and Emission Testing lab", "Manufacturing Technology lab/Engine Performance and Emission Testing lab"};
    String[] sautoonethursday = {"1-Mathematics III", "2-Engineering Thermodynamics", "3-Engineering Materials and Metallurgy/Manufacturing Technology", "4-Automotive Engines", "5-Engine Performance and Emission Testing lab/Strength of Materials lab", "6-Engine Performance and Emission Testing lab/Strength of Materials lab", "7-Engine Performance and Emission Testing lab/Strength of Materials lab"};
    String[] sautoonefriday = {"1-Mechanics of Solids", "2-Engineering Materials and Metallurgy", "3-Mathematics III", "4-Engineering Thermodynamics/Mechanics of Solids", "5-Automotive Engines", "6-Manufacturing Technology", "7-Engineering Thermodynamics(Tutorial)"};

    //third year auto
    String[] tautoonemonday = {"1-Design of Machine Elements", "2-Automotive Fuels and Lubricants", "3-Automotive Transmission", "4-Automotive Electrical and Electronics Systems", "5-Automotive Electrical and Electronics lab/Automotive Fuels and Lubricants lab", "6-Automotive Electrical and Electronics lab/Automotive Fuels and Lubricants lab", "7-Automotive Electrical and Electronics lab/Automotive Fuels and Lubricants lab"};
    String[] tautoonetuesday = {"1-Environmental Science and Engineering", "2-Automotive Electrical and Electronics Systems", "3-Vehicle Design and Data Characteristics", "4-library", "5-Automotive Transmission", "6-Automotive Fuels and Lubricants", "7-Vehicle Design and Data Characteristics(Tutorial)"};
    String[] tautoonewednesday = {"1-Automotive Fuels and Lubricants", "2-Automotive Fuels and Lubricants lab/Automotive Electrical and Electronics lab", "3-Automotive Fuels and Lubricants lab/Automotive Electrical and Electronics lab", "4-Automotive Fuels and Lubricants lab/Automotive Electrical and Electronics lab", "5-Vehicle Design and Data Characteristics", "6-Environmental Science and Engineering", "7-Automotive Electrical and Electronics System"};
    String[] tautoonethursday = {"1-Automotive Transmission", "2-Design of Machine Elements", "3-Automotive Fuels and Lubricant", "4-Environmental Science and Engineering", "5-Automotive Transmission", "6-Design of Machine Elements(Tutorial)", "7-Vehicle Design and Data Characteristics"};
    String[] tautoonefriday = {"1-Communication Skills-Laboratory Based", "2-Communication Skills-Laboratory Based", "3-Communication Skills-Laboratory Based", "4-Communication Skills-Laboratory Based", "5-Automotive Electrical and Electronics System", "6-Design of Machine Elements", "7-Environmental Science and Engineering"};

    //fourth year auto
    String[] frautoonemonday = {"1-New Generation and Hybrid Vehicles", "2-Automotive Pollution and Control", "3-Automotive Aerodynamics/Automotive Safety", "4-Finite Element Analysis", "5-Vehicle Maintenance", "6-Placement(1)", "7-Project work(1)"};
    String[] frautoonetuesday = {"1-Engine and Vehicle Management System", "2-Finite Element Analysis", "3-New Generation and Hybrid Vehicles", "4-Vehicle Maintenance", "5-Automotive Pollution and Control", "6-Automotive Aerodynamics/Automotive Safety", "7-Placement(1)"};
    String[] frautoonewednesday = {"1-Finite Element Analysis", "2-Automotive Aerodynamics/Automotive Safety", "3-Vehicle Maintenance", "4-Project work(2)", "5-Automotive Pollution and Control", "6-New Generation and Hybrid Vehicles", "7-Engine and Vehicle Management System"};
    String[] frautoonethursday = {"1-Engine Performance and Emission Testing lab/Vehicle Maintenance lab", "2-Engine Performance and Emission Testing lab/Vehicle Maintenance lab", "3-Engine Performance and Emission Testing lab/Vehicle Maintenance lab", "4-Engine and Vehicle Management System", "5-New Generation and Hybrid Vehicles", "6-Automotive Pollution and Control", "7-Library"};
    String[] frautoonefriday = {"1-Vehicle Maintenance", "2-Automotive Aerodynamics/Automotive Safety", "3-Engine and Vehicle Management System", "4-Finite Element Analysis(Tutorial)", "5-Vehicle Maintenance lab/Engine Performance and Emission Testing lab", "6-Vehicle Maintenance lab/Engine Performance and Emission Testing lab", "7-Vehicle Maintenance lab/Engine Performance and Emission Testing lab"};


    //biotech first yr

    String[] fbiotechtwomonday = {"1-Engineering physics II", "2-mathematics II", "3-Biochemistry", "4-Microbiology", "5-Engineering Chemistry II", "6-Biochemistry", "7-Technical english II"};
    String[] fbiotechtwotuesday = {"1-Microbiology", "2-Engineering Chemistry II", "3-Engineering physics II", "4-Technical english II", "5-Library", "6-Engineering Physics II", "7-Mathematics II"};
    String[] fbiotechtwowednesday = {"1-Technical english II", "2-Microbiology", "3-Mathematics II", "4-Engineering chemistry II", "5-Mathematics II/Biochemistry (Tut)", "6-Engineering Physics II", "7-Biochemistry"};
    String[] fbiotechtwothursday = {"1-Engineering Chemistry II", "2-Mathematics II", "3-Technical english II", "4-Biochemistry lab/Microbiology lab", "5-Biochemistry lab/Microbiology lab", "6-Biochemistry lab/Microbiology lab", "7-Biochemistry lab/Microbiology lab"};
    String[] fbiotechtwofriday = {"1-Biochemistry", "2-Microbiology", "3-Mathematics II", "4-Biochemistry lab/Microbiology lab", "5-Biochemistry lab/Microbiology lab", "6-Biochemistry lab/Microbiology lab", "7-Biochemistry lab/Microbiology lab"};


    //biotech second year
    String[] sbiotechtwomonday = {"1-Applied thermodynamics for Biotechnologies", "2-Probability and statistics", "3-Analytical method and instrumentation", "4-Heat transfer operations", "5-Bioprocess principles", "6-Probability and Statistics", "7-Seminar"};
    String[] sbiotechtwotuesday = {"1-Chemical Engineering lab/Instrumental method of analysis lab", "2-Chemical Engineering lab/Instrumental method of analysis lab", "3-Chemical Engineering lab/Instrumental method of analysis lab", "4-Chemical Engineering lab/Instrumental method of analysis lab", "5-Probability and statistics", "6-Analytical methods and instrumentation", "7-Heat transfer operations"};
    String[] sbiotechtwowednesday = {"1-Chemical Engineering lab/Instrumental method of analysis lab", "2-Chemical Engineering lab/Instrumental method of analysis lab", "3-Chemical Engineering lab/Instrumental method of analysis lab", "4-Chemical Engineering lab/Instrumental method of analysis lab", "5-Bioprocess principles", "6-Applied thermodynamics for biotechnologies", "7-Enzyme technology and bio transformation"};
    String[] sbiotechtwothursday = {"1-Heat transform operation", "2-Analytical methods and instrumentation", "3-Probability and Statistics", "4-Bioprocess principles", "5-Applied thermodynamics for biotechnologies", "6-Enzyme technology and Biotransformation", "7-Library"};
    String[] sbiotechtwofriday = {"1-Analytical methods and instrumentation ", "2-Enzyme technology and Biotransformation", "3-Applied thermodynamics for biotechnologies", "4-Bioprocess Principles", "5-Probability and statistics", "6-heat transfer operations", "7-Enzyme technology and biotransformation"};

    //boitech third yr
    String[] tbiotechtwomonday = {"1-Employability skills lab", "2-Employability skills lab", "3-Employability skills lab", "4-Employability skills lab", "5-library", "6-Total quality management for biotechnologist", "7-Plant biotechnology/Metabolic engineering"};
    String[] tbiotechtwotuesday = {"1-Plant biotechnology/Metabolic engineering", "2-Total quality management for biotechnologist", "3-Immunology", "4-Chemical reaction engineering", "5-Genetic engineering and genomics", "6-Moleculer Pathogenesis of Infections Disease/Cancer biology and therapeutics", "7-Seminar"};
    String[] tbiotechtwowednesday = {"1-MolecularPathogenesis of infections disease/Cancer biology and therapeutics", "2-Immunology", "3-Genetic engineering and genomics", "4-lunch break(11.15-11.55)", "5-Genetic engineering lab/Bioprocess lab-2", "6-Genetic engineering lab/Bioprocess lab-2", "7-Genetic engineering lab/Bioprocess lab-2"};
    String[] tbiotechtwothursday = {"1-Chemical Reaction engineering", "2-MolecularPathogenesis of infections disease/Cancer biology and therapeutics", "3-immunology", "4-lunch break(11.15-11.55)", "5-Genetic engineering lab/Bioprocess lab-2", "6-Genetic engineering lab/Bioprocess lab-2", "7-Genetic engineering lab/Bioprocess lab-2"};
    String[] tbiotechtwofriday = {"1-Genetic engineering and genomics", "2-Immunology", "3-Chemical reaction engineering", "4-Genetic engineering an genomics", "5-Total quality management for biotechnologist", "6-Genetic engineering adn genomics", "7-Chemical reaction engineering"};

    //biotech fourth year

    String[] frbiotechtwomonday = {"1-Project work", "2-Project work", "3-Library", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frbiotechtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frbiotechtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frbiotechtwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work review", "5-Project work review", "6-Project work review", "7-Project work review"};
    String[] frbiotechtwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work review", "5-Project work review", "6-Project work review", "7-Project work review"};

    // odd sem of sec,third and fourth year biotech

    String[] sbiotechonemonday = {"1-Cell Biology", "2-Stoichiometry and Process Calculations", "3-Bioorganic Chemistry", "4-Environmental Science and Engineering", "5-Seminar", "6-Transforms and Partial Differential Equations", "7-Stoichiometry and Process Calculations(Tutorial)"};
    String[] sbiotechonetuesday = {"1-Environmental Science and Engineering", "2-Basic Industrial Biotechnology", "3-Bioorganic Chemistry", "4-LUNCH(11.15-11.55)", "5-Cell Biology Lab/Bioorganic Chemistry Lab", "6-Cell Biology Lab/Bioorganic Chemistry Lab", "7-Cell Biology Lab/Bioorganic Chemistry Lab"};
    String[] sbiotechonewednesday = {"1-Transforms and Partial Differential Equations", "2-Cell Biology", "3-Basic Industrial Biotechnology", "4-LUNCH(11.15-11.55)", "5-Cell Biology Lab/Bioorganic Chemistry Lab", "6-Cell Biology Lab/Bioorganic Chemistry Lab", "7-Cell Biology Lab/Bioorganic Chemistry Lab"};
    String[] sbiotechonethursday = {"1-Stoichiometry and Process Calculations", "2-Basic Industrial Biotechnology", "3-Bioorganic Chemistry", "4-Cell Biology", "5-Transforms and Partial Differential Equations", "6-Transforms and Partial Differential Equations(Tutorial)", "7-Environmental Science and Engineering"};
    String[] sbiotechonefriday = {"1-Cell Biology", "2-Stoichiometry and Process Calculations", "3-Transforms and Partial Differential Equations", "4-Basic Industrial Biotechnology", "5-Environmental Science and Engineering", "6-Bioorganic Chemistry(Tutorial)", "7-Library"};

    //boitech third yr
    String[] tbiotechonemonday = {"1-Biophysics/Principles of Food Processing", "2-Molecular Biology", "3-Mass Transfer Operation", "4-LUNCH(11.15-11.55)", "5-Bioprocess lab-1/Molecular Biology lab", "6-Bioprocess lab-1/Molecular Biology lab", "7-Bioprocess lab-1/Molecular Biology lab"};
    String[] tbiotechonetuesday = {"1-Mass Transfer Operation", "2-Molecular Biology", "3-Biophysics/Principles of Food Processing", "4-LUNCH(11.15-11.55)", "5-Bioprocess lab-1/Molecular Biology lab", "6-Bioprocess lab-1/Molecular Biology lab", "7-Bioprocess lab-1/Molecular Biology lab"};
    String[] tbiotechonewednesday = {"1-Molecular Biology", "2-Biophysics/Principles of Food Processing", "3-Biopharmaceutical Technology", "4-Protein Structure Function and Protemics", "5-Bioprocess Engineering", "6-Library", "7-Mass Transfer Operation(Tutorial)"};
    String[] tbiotechonethursday = {"1-Bioprocess Engineering", "2-Protein Structure Function and Protemics", "3-Mass Transfer Operation", "4-Biopharmaceutical Technology", "5-Biophysics/Principles of Food Processing", "6-Protein Structure Function and Protemics(Tutorial)", "7-Molecular Biology"};
    String[] tbiotechonefriday = {"1-Biopharmaceutical Technology", "2-Bioprocess Engineering", "3-Protein Structure Function and Protemics", "4-Seminar 1", "5-Bioprocess Engineering(Tutorial)", "6-Biopharmaceutical Technology", "7-Seminar 2"};

//biotech fourth year

    String[] frbiotechonemonday = {"1-Bioconjugate Technology and Applications/Bio Industrial Entrepreneurship", "2-Downstream Processing", "3-PROJECT", "4-Bioinformatics and Computational Biology(Tutorial)", "5-Tissue Engineering/Neurobiology and Cognitive Sciences", "6-Creativity, Innovation and New Product Development", "7-Seminar"};
    String[] frbiotechonetuesday = {"1-Bioinformatics and Computational Biology", "2-Downstream Processing", "3-Creativity, Innovation and New Product Development", "4-Bioinformatics and Computational Biology", "5-Creativity, Innovation and New Product Development", "6-Library", "7-Tissue Engineering/Neurobiology and Cognitive Sciences"};
    String[] frbiotechonewednesday = {"1-Bioconjugate Technology and Applications/Bio Industrial Entrepreneurship", "2-Tissue Engineering/Neurobiology and Cognitive Sciences", "3-Bioconjugate Technology and Applications/Bio Industrial Entrepreneurship", "4-Immunology lab/Bioinformatics lab", "5-Immunology lab/Bioinformatics lab", "6-Immunology lab/Bioinformatics lab", "7-Immunology lab/Bioinformatics lab"};
    String[] frbiotechonethursday = {"1-Bioinformatics and Computational Biology", "2-Downstream Processing(Tutorial)", "3-Creativity, Innovation and New Product Development", "4-Bioinformatics lab/Downstream Processing lab", "5-Bioinformatics lab/Downstream Processing lab", "6-Bioinformatics lab/Downstream Processing lab", "7-Bioinformatics lab/Downstream Processing lab"};
    String[] frbiotechonefriday = {"1-Tissue Engineering/Neurobiology and Cognitive Sciences", "2-Bioconjugate Technology and Applications/Bio Industrial Entrepreneurship", "3-Downstream Processing", "4-Downstream Processing lab/Immunology lab", "5-Downstream Processing lab/Immunology lab", "6-Downstream Processing lab/Immunology lab", "7-Downstream Processing lab/Immunology lab"};
    //chem a first yr

    String[] fchematwomonday = {"1-Phy and chem lab II", "2-Phy and chem lab II", "3-Phy and chem lab II", "4-Engineering mechanics", "5-Engineering physics II", "6-Mathematics II", "7-BEEE"};
    String[] fchematwotuesday = {"1-Mathematics II", "2-Technical english II", "3-Engineering chemistry II", "4-Engineering mechanics", "5-BEEE", "6-Engineering Physics II", "7-Technical English II"};
    String[] fchematwowednesday = {"1-Engineering mechanics", "2-Engineering Chemistry II", "3-Mathematics II/BEEE", "4-Engineering physics II", "5-CP lab/BEEE lab", "6-CP lab/BEEE lab", "7-CP lab/BEEE lab"};
    String[] fchematwothursday = {"1-Engineering physics II", "2-BEEE", "3-Engineering Chemistry II", "4-BEEE", "5-Technical english II", "6-Engineering mechanics", "7-Mathematics II"};
    String[] fchematwofriday = {"1-BEEE lab/CP lab", "2-BEEE lab/CP lab", "3-BEEE lab/CP lab", "4-Mathematics II", "5-Technical english II", "6-Engineering chemistry II", "7-Engineering mechanics "};

    //chem a second yr

    String[] schematwomonday = {"Probability and Statistics", "2-Chemical process calculations", "3-Mechanical operations", "4-Chemical engineering thermodynamics I", "5-Chemical process calculations", "6-Chemical engineering thermodynamics I", "7-Chemical Process Industries I"};
    String[] schematwotuesday = {"1-Chemical Engineering thermodynamics I", "2-Probability and Statistics", "3-Chemical process industries I", "4-Mechanical operations", "5-Environmental science and engineering", "6-Chemical process calculations", "7-Envionmental science and engineering"};
    String[] schematwowednesday = {"1-Chemical process calculations", "2-Chemical engineering thermodynamics I", "3-Probabiiliy and Statistics", "4-Chemical Process industries I", "5-Technical analysis lab/fluid mechanics lab", "6-Technical analysis lab/fluid mechanics lab", "7-Technical analysis lab/fluid mechanics lab"};
    String[] schematwothursday = {"1-Mechanical operations", "2-Environmental science and engineering", "3-Chemical process calculations", "4-Library", "5-Mechanical operations", "6-Probability and statistics", "7-Chemical process calculations"};
    String[] schematwofriday = {"1-Chemical process industries I", "2-Probability and Statistics", "3-Mechanical operations", "4-Environmental science and engineering", "5-Technical analysis lab/fluid mechanics lab", "6-Technical analysis lab/fluid mechanics lab", "7-Technical analysis lab/fluid mechanics lab"};

    //chem a third year
    String[] tchematwomonday = {"1-Process instrumentation dynamics and control", "2-Chemical reaction engineering 1", "3-Mass transfer 2", "4-Material science and technology", "5-Energy engineering", "6-Chemical reaction engineering", "7-Library"};
    String[] tchematwotuesday = {"1-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "2-mass transfer 2", "3-Energy engineering", "4-Chemical reaction engineering 1", "5-Heat transfer lab/Mass transfer lab", "6-Heat transfer lab/Mass transfer lab", "7-Heat transfer lab/Mass transfer lab"};
    String[] tchematwowednesday = {"1-Mass transfer 2", "2-Energy engineering", "3-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "4-Process instrumentation dynamics and control", "5-Heat transfer lab/Process equipment design 2", "6-Heat transfer lab/Process equipment design 2", "7-Heat transfer lab/Process equipment design 2"};
    String[] tchematwothursday = {"1-Material science and technology", "2-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "3-Process instrumentation dynamics and control", "4-Chemical reaction engineering 1", "5-Process equipment design 2/mass transfer lab", "6-Process equipment design 2/mass transfer lab", "7-Process equipment design 2/mass transfer lab"};
    String[] tchematwofriday = {"1-Chemical reaction engineering", "2-Process instrumentation dynamics and control", "3-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "4-Material Science and technology", "5-Mass transfer 2", "6-Energy engineering", "7-Material Science and technology"};

    //chem a fourth year

    String[] frchematwomonday = {"1-Petroleum technology", "2-Process plan utilities", "3-petroleum technology", "4-Process plan utilities", "5-petroleum technology", "6-Process plan utilities", "7-petroleum technology", "8-Process plan utilities"};
    String[] frchematwotuesday = {"1-Project Practice-Aspen plus training", "2-Project Practice-Aspen plus training", "3-Project Practice-Aspen plus training", "4-Project Practice-Aspen plus training", "5-Project Practice-Aspen plus training", "6-Project Practice-Aspen plus training", "7-Project Practice-Aspen plus training"};
    String[] frchematwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frchematwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frchematwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};


    //odd sem of sec,third and fourth year chem a section

    //chem a second yr

    String[] schemaonemonday = {"Mathematics III", "2-Mechanics of Solids for Chemical Engineering", "3-Fluid Mechanics", "4-Organic Chemistry", "5-Physical Chemistry", "6-Electrical Drives and Control", "7-Seminar"};
    String[] schemaonetuesday = {"1-Organic Chemistry", "2-Fluid Mechanics", "3-Mechanics of Solids for Chemical Engineering", "4-Physical Chemistry", "5-Electrical Drives and Control", "6-Mathematics III", "7-Library"};
    String[] schemaonewednesday = {"1-Mechanics of Solids for Chemical Engineering", "2-Mathematics III", "3-Fluid Mechanics", "4-Electrical Drives and Control", "5-Organic Chemistry", "6-Mechanics of Solids for Chemical Engineering", "7-Physical Chemistry"};
    String[] schemaonethursday = {"1-Fluid Mechanics", "2-Physical Chemistry", "3-Mathematics III", "4-Organic Chemistry", "5-Organic Chemistry lab/Physical Chemistry lab", "6-Organic Chemistry lab/Physical Chemistry lab", "7-Organic Chemistry lab/Physical Chemistry lab"};
    String[] schemaonefriday = {"1-Electrical Drives and Control", "2-Organic Chemistry lab/Physical Chemistry lab", "3-Organic Chemistry lab/Physical Chemistry lab", "4-Organic Chemistry lab/Physical Chemistry lab", "5-Mathematics III", "6-Fluid Mechanics", "7-Mechanics of Solids for Chemical Engineering"};

    //chem a third year
    String[] tchemaonemonday = {"1-Chemical Engineering Thermodynamics-2", "2-Heat Transfer", "3-Instrumental Methods of Analysis", "4-Numerical Methods", "5-Process Equipment Design-1/Mechanical Operations lab", "6-Process Equipment Design-1/Mechanical Operations lab", "7-Process Equipment Design-1/Mechanical Operations lab"};
    String[] tchemaonetuesday = {"1-Numerical Methods", "2-Chemical Process Industries-2", "3-Chemical Engineering Thermodynamics-2", "4-Mass Transfer-1", "5-Process Equipment Design-1/Mechanical Operations lab", "6-Process Equipment Design-1/Mechanical Operations lab", "7-Process Equipment Design-1/Mechanical Operations lab"};
    String[] tchemaonewednesday = {"1-Heat Transfer", "2-Numerical Methods", "3-Chemical Process Industries-2", "4-Instrumental Methods of Analysis", "5-Mass Transfer-1", "6-Chemical Engineering Thermodynamics-2", "7-Numerical Methods"};
    String[] tchemaonethursday = {"1-Communication Skills Laboratory Based", "2-Communication Skills Laboratory Based", "3-Communication Skills Laboratory Based", "4-Communication Skills Laboratory Based", "5-Heat Transfer", "6-Mass Transfer-1", "7-Instrumental Methods of Analysis"};
    String[] tchemaonefriday = {"1-Chemical Process Industries-2", "2-Mass Transfer-1", "3-Heat Transfer", "4-Chemical Engineering Thermodynamics-2", "5-Instrumental Methods of Analysis", "6-Numerical Methods", "7-Chemical Engineering Thermodynamics-2"};

//chem a fourth year

    String[] frchemaonemonday = {"1-Transport Phenomena", "2-Process Economics", "3-Chemical Reaction Engineering-2", "4-Chemical Process Plant Safety", "5-Biochemical Engineering", "6-Fertiliser Technology/Modern Separation Process", "7-Chemical Reaction Engineering-2"};
    String[] frchemaonetuesday = {"1-Chemical Reaction Engineering-2", "2-Chemical Process Plant Safety", "3-Fertiliser Technology/Modern Separation Process", "4-Biochemical Engineering", "5-Seminar and Comprehension", "6-Seminar and Comprehension", "7-Seminar and Comprehension"};
    String[] frchemaonewednesday = {"Biochemical Engineering", "2-Fertiliser Technology/Modern Separation Process", "3-Process Economics", "4-Transport Phenomena", "5-Chemical Reaction Engineering lab/Process Control lab", "6-Chemical Reaction Engineering lab/Process Control lab", "7-Chemical Reaction Engineering lab/Process Control lab"};
    String[] frchemaonethursday = {"1-Fertiliser Technology/Modern Separation Process", "2-Transport Phenomena", "3-Biochemical Engineering", "4-Chemical Reaction Engineering-2", "5--Chemical Process Plant Safety", "6-Transport Phenomena", "7-Process Economics"};
    String[] frchemaonefriday = {"1-Process Economics", "2-Chemical Process Plant Safety", "3-Chemical Reaction Engineering-2", "4-Transport Phenomena", "5-Chemical Reaction Engineering lab/Process Control lab", "6-Chemical Reaction Engineering lab/Process Control lab", "7-Chemical Reaction Engineering lab/Process Control lab"};
    //chem b first yr
    String[] fchembtwomonday = {"1-Engineering mechanics", "2-BEEE", "3-Mathematics II", "4-Engineering chemistry II", "5-Technical english II", "6-BEEE", "7-Engineering physics II"};
    String[] fchembtwotuesday = {"1-Cp Lab/BEEE lab", "2-Cp Lab/BEEE lab", "3-Cp Lab/BEEE lab", "4-Enginering mechanics ", "5-BEEE", "6-Engineering physics II", "7-Technical english II"};
    String[] fchembtwowednesday = {"1-Mathematics II/BEEE", "2-Engineering mechanics", "3-Engineering physics II", "4-Technical english II", "5-Engineering chemistry II", "6-Mathematics II", "7-Engineering mechanics"};
    String[] fchembtwothursday = {"1-BEEE", "2-Engineering chemistry II", "3-Mathematics II", "4-Engineering mechanics", "5-Phy and Chem lab II", "6-Phy and Chem lab II", "7-Phy and Chem lab II"};
    String[] fchembtwofriday = {"2-Technical english II", "2-Mathematics II", "3-Engineering physics II", "4-Engineering chemistry II", "5-CP /BEEE Lab", "6-CP /BEEE Lab", "7-CP /BEEE Lab"};


    //chem b second yr
    String[] schembtwomonday = {"1-Chemical process calculations", "2-Chemical engineering thermodynamics 1", "3-Probability and statistics", "4-Chemical process industries 1", "5-Technical analysis lab/Fluid mechanics lab", "6-Technical analysis lab/Fluid mechanics lab", "7-Technical analysis lab/Fluid mechanics lab"};
    String[] schembtwotuesday = {"1-Environmental Science and engineering", "2-Chemical process calculations", "3-Chemical process industries 1", "4-Chemical engineering thermodynamics 1", "5-Probability and statistics ", "6-Chemical process industries 1", "7-Chemical engineering thermodynanmics"};
    String[] schembtwowednesday = {"1-Chemical engineering thermodynamics", "2-Probability and statistics", "3-Chemical process calculations", "4-Mechanical operations", "5-Environmental science and engineering", "6-Mechanical operations", "7-Library"};
    String[] schembtwothursday = {"1-Mechanical operations", "2-Environmental science and engineering", "3-probability and statistics", "4-Chemical process calculations", "5-Technical analysis lab/Fluid mechanics lab", "6-Technical analysis lab/Fluid mechanics lab", "7-Technical analysis lab/Fluid mechanics lab"};
    String[] schembtwofriday = {"1-Probability and statistics", "2-Mechanical operations", "3-Environmental science an engineering", "4-Mechanical operations", "5-Chemical process calculations", "6-Chemical engineering thermodynamics 1", "7-Chemical process industries 1"};

    //chem b third yr

    String[] tchembtwomonday = {"1-Energy engineering", "2-Chemical reaction engineering 1", "3-Process instrumentation dynamics and control", "4-Mass transfer 2 ", "5-Chemical reaction engineering", "6-Process instrumentation dynamics and control", "7-library"};
    String[] tchembtwotuesday = {"1-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "2-Process instrumentation dynamics and control", "3-Material science and technology", "4-Energy engineering", "5-Mass transfer 2", "6-Material science and technology", "7-Energy engineering"};
    String[] tchembtwowednesday = {"1-Chemical reactions engineering 1", "2-Energy engineering", "3-Energy engineering/Material science and technology/green chemistry and engineering/Waste water management", "4-Material science and technology", "5-Process equipment design 2/Mass transfer lab", "6-Process equipment design 2/Mass transfer lab", "7-Process equipment design 2/Mass transfer lab"};
    String[] tchembtwothursday = {"1-Process instrumentations dynamics and control", "2-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "3-Chemical reaction engineering 1", "4-mass transfer 2", "5-heat transfer lab/Process equipment design 2", "6-heat transfer lab/Process equipment design 2", "7-heat transfer lab/Process equipment design 2"};
    String[] tchembtwofriday = {"1-Mass transfer 2", "2-Material science and technology", "3-Food Technology/Air Pollution and Control/Green Chemistry and engineering/Waste Water Management", "4-Chemical reaction engineering 1", "5-Heat transfer lab/Mass transfer lab", "6-Heat transfer lab/Mass transfer lab", "7-Heat transfer lab/Mass transfer lab"};

    //chem b fourth yr
    String[] frchembtwomonday = {"1-Petroleum technology", "2-Process plant utilities", "3-Petroleum technology", "4-Process plant utilities", "5-Petroleum technology", "6-Process plant utilities", "7-Petroleum technology", "8-Process plant utilities"};
    String[] frchembtwotuesday = {"1-Project practice aspen plus training", "2-Project practice aspen plus training", "3-Project practice aspen plus training", "4-Project practice aspen plus training", "5-Project practice aspen plus training", "6-Project practice aspen plus training", "7-Project practice aspen plus training", "8-Project practice aspen plus training"};
    String[] frchembtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work", "8-Project work"};
    String[] frchembtwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work", "8-Project work"};
    String[] frchembtwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work", "8-Project work"};

    // odd sem of second ,third and fourth year of chem bsection

    //chem b second yr
    //chem b second yr
    String[] schembonemonday = {"1-Mechanics of Solids for Chemical Engineering", "2-Mathematics III", "3-Physical Chemistry", "4-Fluid Mechanics", "5-Electrical Drives and Control", "6-Organic Chemistry", "7-Mechanics of Solids for Chemical Engineering"};
    String[] schembonetuesday = {"1-Physical Chemistry", "2-Fluid Mechanics", "3-Mechanics of Solids for Chemical Engineering", "4-Organic Chemistry", "5-Organic Chemistry lab/Physical Chemistry lab", "6-Organic Chemistry lab/Physical Chemistry lab", "7-Organic Chemistry lab/Physical Chemistry lab"};
    String[] schembonewednesday = {"1-Mathematics III", "2-Organic Chemistry lab/Physical Chemistry lab", "3-Organic Chemistry lab/Physical Chemistry lab", "4-Organic Chemistry lab/Physical Chemistry lab", "5-Physical Chemistry", "6-Electrical Drives and Control", "7-Organic Chemistry"};
    String[] schembonethursday = {"1-Fluid Mechanics", "2-Electrical Drives and Control", "3-Mathematics III", "4-Physical Chemistry", "5-Seminar", "6-Mechanics of Solids for Chemical Engineering", "7-Mathematics III"};
    String[] schembonefriday = {"1-Electrical Drives and Control", "2-Mechanics of Solids for Chemical Engineering", "3-Fluid Mechanics", "4-Mathematics III", "5-Fluid Mechanics", "6-Organic Chemistry", "7-Library"};

//chem b third yr

    String[] tchembonemonday = {"1-Instrumental Methods of Analysis", "2-Chemical Engineering Thermodynamics-2", "3-Heat Transfer", "4-Mass Transfer-1", "5-Chemical Process Industries-2", "6-Communication Skills Laboratory Based", "7-Communication Skills Laboratory Based"};
    String[] tchembonetuesday = {"1-Heat Transfer", "2-Numerical Methods", "3-Mass Transfer-1", "4-Chemical Process Industries-2", "Instrumental Methods of Analysis", "6-Communication Skills Laboratory Based", "7-Communication Skills Laboratory Based"};
    String[] tchembonewednesday = {"1-Mass Transfer-1", "2-Instrumental Methods of Analysis", "3-Chemical Engineering Thermodynamics-2", "4-Numerical Methods", "5-Process Equipment Design-1/Mechanical Operations lab", "6-Process Equipment Design-1/Mechanical Operations lab", "7-Process Equipment Design-1/Mechanical Operations lab"};
    String[] tchembonethursday = {"1-Chemical Engineering Thermodynamics-2", "2-Chemical Process Industries-2", "3-Numerical Methods", "4-Heat Transfer", "5-Numerical Methods", "6-Mass Transfer-1", "7-Chemical Engineering Thermodynamics-2"};
    String[] tchembonefriday = {"1-Numerical Methods", "2-Process Equipment Design-1/Mechanical Operations lab", "3-Process Equipment Design-1/Mechanical Operations lab", "4-Process Equipment Design-1/Mechanical Operations lab", "5-HChemical Engineering Thermodynamics-2", "6-Heat Transfer", "7-Instrumental Methods of Analysis"};

    //chem b fourth yr
    String[] frchembonemonday = {"1-Chemical Reaction Engineering-2", "2-Chemical Process Plant Safety", "3-Transport Phenomena", "4-Process Economics", "5-Biochemical Engineering", "6-Fertiliser Technology/Modern Separation Process", "7-Transport Phenomena"};
    String[] frchembonetuesday = {"1-Process Economics", "2-Chemical Reaction Engineering-2", "3-Fertiliser Technology/Modern Separation Process", "4-Biochemical Engineering", "5-Chemical Reaction Engineering lab/Process Control lab", "6-Chemical Reaction Engineering lab/Process Control lab", "7-Chemical Reaction Engineering lab/Process Control lab"};
    String[] frchembonewednesday = {"1-Biochemical Engineering", "2-Fertiliser Technology/Modern Separation Process", "3-Process Economics", "4-Transport Phenomena", "5-Chemical Process Plant Safety", "6-Chemical Reaction Engineering-2", "7-Chemical Process Plant Safety"};
    String[] frchembonethursday = {"1-Fertiliser Technology/Modern Separation Process", "2-Transport Phenomena", "3-Biochemical Engineering", "4-Process Economics", "5-Chemical Reaction Engineering lab/Process Control lab", "6-Chemical Reaction Engineering lab/Process Control lab", "7-Chemical Reaction Engineering lab/Process Control lab"};
    String[] frchembonefriday = {"1-Transport Phenomena", "2-Chemical Reaction Engineering-2", "3-Chemical Process Plant Safety", "4-Chemical Reaction Engineering-2", "5-Seminar and Comprehension", "6-Seminar and Comprehension", "7-Seminar and Comprehension"};
    //civil first yr
    String[] fciviltwomonday = {"1-Engineering chemistry II", "2-Basic electric and electronic eng", "3-engineering mechanics", "4-Engineering chemistry II", "5-Mathematics II", "6-Engineering physics II", "7-Technical englih II"};
    String[] fciviltwotuesday = {"1-Engineering mechanics", "2-Basic electric and electronic eng", "3-Technical english II", "4-mathematics II", "5-Physics and chemistry labII", "6-Physics and chemistry labII", "7-Physics and chemistry labII"};
    String[] fciviltwowednesday = {"1-CAD CAM lab", "2-CAD CAM lab", "3-CAD CAM lab", "4-Engineering physics II", "5-Engineering mechanics", "6-Mathematics II", "7-Basic electric and electronics eng"};
    String[] fciviltwothursday = {"1-Engineering chemistry II", "2-Engineering physics II", "3-Mathematics II", "4-Technical english II", "5-Basic electric and electronics eng", "6-Library", "7-Engineering mechanics"};
    String[] fciviltwofriday = {"1-Basic electric and electronic eng", "2-Technical english II", "3-Engineering mechanics", "4-Engineering physics", "5-Mathematics II", "6-Engineering chemistry II", "7-Mathematics/Engineering mechanics (Tut)"};

    //civil 2nd yr
    String[] sciviltwomonday = {"1-Strength of materials", "2-Numerical methods", "3-Construction materials", "4-Strength of materials", "5-Hydraulic engineering lab/Survey practical 2", "6-Hydraulic engineering lab/Survey practical 2", "7-Hydraulic engineering lab/Survey practical 2", "8-Survey practical 2"};
    String[] sciviltwotuesday = {"1-Surveying 2", "2-Strength of materials lab/Hydraulic engineering lab", "3-Strength of materials lab/Hydraulic engineering lab", "4-Strength of materials lab/Hydraulic engineering lab", "5-Construction materials", "6-Soil mechanics", "7-Applied hydraulic engineering"};
    String[] sciviltwowednesday = {"1-Applied hydraulic engineering", "2-Numerical methods", "3-Strength of materials", "4-Surveying 2", "5-Strength of materials lab/Survey practical 2", "6-Strength of materials lab/Survey practical 2", "7-Strength of materials lab/Survey practical 2"};
    String[] sciviltwothursday = {"1-Soil mechanics", "2-Surveying 2", "3-Applied hydraulic engineering", "4-Numerical methods", "5-Strength of materials", "6-Applied hydraulic engineering", "7-Construction materials"};
    String[] sciviltwofriday = {"1-Numerical methods", "2-Soil mechanics", "3-Applied hydraulic engineering", "4-Strength of materials", "5-Numerical methods", "6-Soil mechanics", "7-Surveying 2"};

    //civil 3rd yr
    String[] tciviltwomonday = {"1-Design of steel structures", "2-Structural analysis 2", "3-Design of reinforced concrete & brick masonry structure", "4-Environmental engineering lab/Concrete and highway engineering lab", "5-Environmental engineering lab/Concrete and highway engineering lab", "7-Environmental engineering lab/Concrete and highway engineering lab"};
    String[] tciviltwotuesday = {"1-Railways Airport and harbour engineering", "2-Environmental engineering 2", "3-Structural analysis 2", "4-Environmental engineering lab/Concrete and highway engineering lab", "5-Environmental engineering lab/Concrete and highway engineering lab", "6-Environmental engineering lab/Concrete and highway engineering lab", "7-Environmental engineering lab/Concrete and highway engineering lab"};
    String[] tciviltwowednesday = {"1-Structural analysis 2", "2-Construction planning and scheduling", "3-design of steel structures", "4-Design of reinforced concrete &brick masonry structures", "5-Railways airport and harbour engineering", "6-environmental engineering 2", "7-Design of reinforced concrete & brick masonry structures"};
    String[] tciviltwothursday = {"1-Construction planning and scheduling", "2-Design of steel structures", "3-Environmental engineering 2", "4-Design of steel structures", "5-Structural analysis 2", "6-Environmental engineering 2", "7-Railways airports and harbour engineering"};
    String[] tciviltwofriday = {"1-Design of reinforced concrete &brick masonry structures", "2-Railways airport and harbour engineering", "3-Structural analysis 2", "4-Library", "5-Design of steel structures", "6-Environmental engineering 2", "7-Construction planning and scheduling"};

    //civil 4th yr
    String[] frciviltwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frciviltwothursday = {"1-Principle of management", "2-Prefabricated structures", "3-Repair and rehabilitation structures", "4-Principle of management", "5-Project work", "6-Repair and rehabilitation structures", "7-Prefabricated structures"};
    String[] frciviltwofriday = {"1-Repair and rehabilitation of structures", "2-Principle of management", "3-Prefabricated Structures", "4-Repair and rehabilitation of structures", "5-project work", "6-Prefabricated structures", "7-Principle of management"};

    //odd sem for second ,third and fourth year in civil

    //civil 2nd yr
    String[] scivilonemonday = {"1-Strength of Materials-1", "2-Engineering Geology", "3-Construction Materials", "4-Mathematics III", "5-Mechanics of Fluids", "6-Strength of Materials-1(Tutorial)", "7-Surveying-1"};
    String[] scivilonetuesday = {"1-Mechanics of Fluids", "2-Mathematics III", "3-Strength of Materials-1", "4-Construction Materials", "5-Strength of Materials lab/Computer Aided Building Drawing", "6-Strength of Materials lab/Computer Aided Building Drawing", "7-Strength of Materials lab/Computer Aided Building Drawing"};
    String[] scivilonewednesday = {"1-Mathematics III", "2-Engineering Geology", "3-Mechanics of Fluids", "4-Library", "5-Strength of Materials lab/Computer Aided Building Drawing", "6-Strength of Materials lab/Computer Aided Building Drawing", "7-Strength of Materials lab/Computer Aided Building Drawing"};
    String[] scivilonethursday = {"1-Surveying-1", "2-Construction Materials", "3-Engineering Geology", "4-Mechanics of Fluids", "5-Strength of Materials-1", "6-Surveying-1", "7-Mathematics III(Tutorial)"};
    String[] scivilonefriday = {"1-Construction Materials", "2-Strength of Materials-1", "3-Surveying-1", "4-Seminar", "5-Mathematics III", "6-Engineering Geology", "7-Mechanics of Fluids(Tutorial)"};

    //civil 3rd yr
    String[] tcivilonemonday = {"1-Soil Mechanics lab/Communication Skills lab", "2-Soil Mechanics lab/Communication Skills lab", "3-Soil Mechanics lab/Communication Skills lab", "4-Soil Mechanics lab/Communication Skills lab", "5-Construction Techniques Equipment & Practice", "6-Structural Analysis-1", "7-Foundation Engineering"};
    String[] tcivilonetuesday = {"1-Environmental Engineering-1", "2-Structural Analysis-1", "3-Foundation Engineering", "4-Construction Techniques Equipment & Practice", "5-Highway Engineering", "6-Design of Reinforced Concrete Elements", "7-Environmental Engineering-1"};
    String[] tcivilonewednesday = {"1-Soil Mechanics lab/Communication Skills lab", "2-Soil Mechanics lab/Communication Skills lab", "3-Soil Mechanics lab/Communication Skills lab", "4-Soil Mechanics lab/Communication Skills lab", "5-Design of Reinforced Concrete Elements", "6-Structural Analysis-1", "7-Highway Engineering"};
    String[] tcivilonethursday = {"1-Design of Reinforced Concrete Elements", "2-Foundation Engineering", "3-Structural Analysis-1", "4-Environmental Engineering-1", "5-Highway Engineering", "6-Construction Techniques Equipment & Practice", "7-Library"};
    String[] tcivilonefriday = {"1-Foundation Engineering", "2-Design of Reinforced Concrete Elements", "3-Highway Engineering", "4-Construction Techniques Equipment & Practice", "5-Environmental Engineering-1", "6-Structural Analysis-1(Tutorial)", "7-Seminar"};

    //civil 4th yr
    String[] frcivilonemonday = {"1-Municipal Solid Waste Management", "2-Estimation and Quantity Surveying", "3-Structural Dynamics and Earthquake Engineering", "4-Traffic Engineering and Management", "5-Prestressed Concrete Structures", "6-Water Resources and Irrigation Engineering", "7-Estimation and Quantity Surveying"};
    String[] frcivilonetuesday = {"1-Prestressed Concrete Structures", "2-Traffic Engineering and Management", "3-Water Resources and Irrigation Engineering", "4-Library", "5-Municipal Solid Waste Management", "6-Structural Dynamics and Earthquake Engineering", "7-Technical Skills"};
    String[] frcivilonewednesday = {"1-Estimation and Quantity Surveying", "2-Water Resources and Irrigation Engineering", "3-Quantitative and Aptitude", "4-Municipal Solid Waste Management", "5-Traffic Engineering and Management", "6-Structural Dynamics and Earthquake Engineering", "7-Prestressed Concrete Structures"};
    String[] frcivilonethursday = {"1-Structural Dynamics and Earthquake Engineering", "2-Estimation and Quantity Surveying", "3-Water Resources and Irrigation Engineering", "4-Computer Aided Design and Drafting lab/Design Project", "5-Computer Aided Design and Drafting lab/Design Project", "6-Computer Aided Design and Drafting lab/Design Project", "7-Computer Aided Design and Drafting lab/Design Project"};
    String[] frcivilonefriday = {"1-Traffic Engineering and Management", "2-Municipal Solid Waste Management", "3-Prestressed Concrete Structures", "4-Computer Aided Design and Drafting lab/Design Project", "5-Computer Aided Design and Drafting lab/Design Project", "6-Computer Aided Design and Drafting lab/Design Project", "7-Computer Aided Design and Drafting lab/Design Project"};


    //cse a first yr
    String[] fcseatwomonday = {"1-Digital lab/PDS I lab", "2-Digital lab/PDS I lab", "3-Digital lab/PDS I lab", "4-technical english II", "5-Engineering physics II", "6-Dpsd", "7-Mathematics II"};
    String[] fcseatwotuesday = {"1-Digital lab/PDS I lab", "2-Digital lab/PDS I lab", "3-Digital lab/PDS I lab", "4-PDS I", "5-Technical english II", "6-Mathemcatics II", "7-DPSD"};
    String[] fcseatwowednesday = {"1-Engineering physics II", "2-Engineering chemistry II", "3-Mathematics II", "4-Engineering chemistry II", "5-Phy and chem II lab", "6-Phy and chem II lab", "7-Phy and chem II lab"};
    String[] fcseatwothursday = {"1-Technical english II", "2-DPSD", "3-PDS I", "4-Engineering physics II", "5-Mathematics II", "6-Technical english II", "7-Library"};
    String[] fcseatwofriday = {"1-PDS I", "2-Mathematics II", "3-DPSD ", "4-PDS I", "5-Engineering chemistry II", "6-Engineering physics II", "7-Engineering chemistry II"};
    //cse a 2nd yr
    String[] scseatwomonday = {"1-Operating systems", "2-Design and analysis of algorithm", "3-Probability and Queueing theory", "4-Microprocessor and microcontroller", "5-Operating system lab/Networks lab", "6-Operating system lab/Networks lab", "7-Operating system lab/Networks lab"};
    String[] scseatwotuesday = {"1-Design and analysis of algorithm", "2-Microprocessor and microcontroller", "3-Library", "4-operating system", "5-Computer networks", "6-Probability and queueing theory", "7-Software engineering"};
    String[] scseatwowednesday = {"1-Microprocessor and microcontroller", "2-Probability and queueing theory", "3-Computer networks", "4-Design and analysis of algorithm", "5-Probability and queueing theory", "6-Software engineering", "7-Operating systems"};
    String[] scseatwothursday = {"1-Probability and queueing theory", "2-Design and analysis of algorithm", "3-Software engineering", "4-Computer networks", "5-Microprocessor and microcontroller lab/Operating system lab", "6-Microprocessor and microcontroller lab/Operating system lab", "7-Microprocessor and microcontroller lab/Operating system lab"};
    String[] scseatwofriday = {"1-Microprocessor and microcontroller", "2-Computer network", "3-operating systems", "4-Software engineering", "5-Networks lab/microprocessor and microcontroller lab", "6-Networks lab/microprocessor and microcontroller lab", "7-Networks lab/microprocessor and microcontroller lab"};

    //cse a 3rd yr
    String[] tcseatwomonday = {"1-Data warehousing and data mining", "2-Mobile computing", "3-Digital signal processing", "4-Distributed systems", "5-Mobile application development lab/compiler lab", "6-Mobile application development lab/compiler lab", "7-Mobile application development lab/compiler lab"};
    String[] tcseatwotuesday = {"1-Communication and soft skill lab", "2--Communication and soft skill lab", "3-Communication and soft skill lab", "4-Communication and soft skill lab", "5-Digital signal processing", "6-Distributes systems", "7-Mobile computing"};
    String[] tcseatwowednesday = {"1-Computer design", "'2-Artificial intelligence", "3-Mobile computing", "4-Distributed system", "5-Data warehousing and data mining", "6-Digital signal processing", "7-Distributed system"};
    String[] tcseatwothursday = {"1-Digital signal processing", "2-Computer design", "3-Artificial intelligence", "4-Mobile computing", "5-Data warehousing and data mining", "6-Compiler design", "7-Artificial Intelligence"};
    String[] tcseatwofriday = {"1-Artificial intelligence", "2-Compiler lab/Mobile app dev lab", "3-Compiler lab/Mobile app dev lab", "4-Compiler lab/Mobile app dev lab", "5-Data warehousing and data mining", "6-Compiler design", "7-Digital signal processing(Tutorial)"};

    //cse a 4th yr
    String[] frcseatwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcseatwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcseatwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcseatwothursday = {"1-Multi-core architecture &programming", "2-Knowledge management", "3-Multi-core architecture &programming", "4-Professional ethics & engineering", "5-Project work", "6-Knowledge management", "7-Professional ethics & engineering"};
    String[] frcseatwofriday = {"1-Professional ethics & engineering", "2-Multi-core architecture &programming", "3-Library", "4-Knowledge management", "5-Professional ethics & engineering", "6-Multi-core architecture &programming", "Knowledge managemnt"};

    //odd sem for second,third and fourth year of cse a section

    //cse a 2nd yr

    String[] scseaonemonday = {"1-Mathematics III", "2-Analog and Digital Communication", "3-Microprocessor and Microcontroller", "4-Library", "5-Environmental Science and Engineering", "6-Programming and Data Structures II", "7-Operating Systems"};
    String[] scseaonetuesday = {"1-Microprocessor and Microcontroller", "2-Operating System lab/Programming and Data Structures lab II", "3-Operating System lab/Programming and Data Structures lab II", "4-Operating System lab/Programming and Data Structures lab II", "5-Analog and Digital Communication", "6-Mathematics III", "7-Environmental Science and Engineering"};
    String[] scseaonewednesday = {"1-Operating Systems", "2-Programming and Data Structures lab II/Microprocessor and Microcontroller lab", "3-Programming and Data Structures lab II/Microprocessor and Microcontroller lab", "4-Programming and Data Structures lab II/Microprocessor and Microcontroller lab", "5-Mathematics III", "6-Environmental Science and Engineering", "7-Programming and Data Structures II"};
    String[] scseaonethursday = {"1-Analog and Digital Communication", "2-Operating Systems", "3-Mathematics III", "4-Programming and Data Structures II", "5-Microprocessor and Microcontroller lab/Operating System lab", "6-Microprocessor and Microcontroller lab/Operating System lab", "7-Microprocessor and Microcontroller lab/Operating System lab"};
    String[] scseaonefriday = {"1-Programming and Data Structures II", "2-Environmental Science and Engineering", "3-Microprocessor and Microcontroller", "4-Mathematics III", "5-Operating Systems", "6-Analog and Digital Communication", "7-Microprocessor and Microcontroller"};

    //cse a 3rd yr
    String[] tcseaonemonday = {"1-Computer Graphics", "2-Case Tools lab/Internet Programming lab", "3-Case Tools lab/Internet Programming lab", "4-Case Tools lab/Internet Programming lab", "5-Object Oriented Analysis and Design", "6-Internet Programming", "7-SEM 3"};
    String[] tcseaonetuesday = {"1-Discrete Mathematics", "2-Internet Programming lab/Computer Graphics lab", "3-Internet Programming lab/Computer Graphics lab", "4-Internet Programming lab/Computer Graphics lab", "5-Discrete Mathematics", "6-Object Oriented Analysis and Designs", "7-Theory of Computation"};
    String[] tcseaonewednesday = {"1-Internet Programming", "'2-Computer Graphics lab/Case Tools lab", "3-Computer Graphics lab/Case Tools lab", "4-Computer Graphics lab/Case Tools lab", "5-Internet Programming", "6-Discrete Mathematics", "7-Computer Graphics"};
    String[] tcseaonethursday = {"1-Computer Graphics", "2-Object Oriented Analysis and Design", "3-Discrete Mathematics", "4-Computer Graphics", "5-Theory of Computation", "6-SEM 1", "7-Internet Programming (Tutorial)"};
    String[] tcseaonefriday = {"1-Theory of Computation", "2-Discrete Mathematics", "3-Object Oriented Analysis and Design", "4-Theory of Computation", "5-Library", "6-Internet Programming", "7-SEM 2"};

    //cse a 4th yr
    String[] frcseaonemonday = {"1-Security lab/Grid and Cloud Computing lab", "2-Security lab/Grid and Cloud Computing lab", "3-Security lab/Grid and Cloud Computing lab", "4-Resource Management Techniques", "5-Grid and Cloud Computing", "6-Graph Theory and Applications", "7-Cryptography and Network Security"};
    String[] frcseaonetuesday = {"1-Grid and Cloud Computing", "2-Resource Management Techniques", "3-Information Retrieval", "4-Ad hoc and Sensor Networks", "5-Grid and Cloud Computing lab/Security lab", "6-Grid and Cloud Computing lab/Security lab", "7-Grid and Cloud Computing lab/Security lab"};
    String[] frcseaonewednesday = {"1-Cryptography and Network Security", "2-Ad hoc and Sensor Networks", "3-Information Retrieval", "4-Graph Theory and Applications", "5-Resource Management Techniques", "6-Library", "7-Grid and Cloud Computing"};
    String[] frcseaonethursday = {"1-Resource Management Techniques", "2-Information Retrieval", "3-Graph Theory and Applications", "4-Cryptography and Network Security", "5-SEM 2", "6-Ad hoc and Sensor Networks", "7-SEM 1"};
    String[] frcseaonefriday = {"1-Graph Theory and Applications", "2-Ad hoc and Sensor Networks", "3-Grid and Cloud Computing", "4-SEM 4", "5-Cryptography and Network Security", "6-Information Retrieval", "7-SEM 3"};

    //cse b first yr

    String[] fcsebtwomonday = {"1-Mathematics II", "2-Engineering physics II", "3-Engineering chemistry II", "4-Library", "5-DPSD/PDS I Lab", "6-DPSD/PDS I Lab", "7-DPSD/PDS I Lab"};
    String[] fcsebtwotuesday = {"1-Engineering physics II", "2-Technical english II", "3-PDS I", "4-DPSD", "5-Mathematics II", "6-Engineering chemistry II", "7-Technical english II"};
    String[] fcsebtwowednesday = {"1-DPSD/PDS I Lab", "2-DPSD/PDS I Lab", "3-DPSD/PDS I Lab", "4-Mathematics II", "5-Engineering chemistry II", "6-PDS I", "7-DPSD"};
    String[] fcsebtwothursday = {"1-PDS I", "2-Mathematics II", "3-DPSD", "4-PDS I", "5-Engineering physics II", "6-Technical english II", "7-Engineering chemistry II"};
    String[] fcsebtwofriday = {"1-DPSD", "2-Engineering physics II", "3-Technical english II", "4-Mathematics II", "5-Phy and Chem lab II", "6-Phy and Chem lab II", "7-Phy and Chem lab II"};

    //cse b 2nd yr
    String[] scsebtwomonday = {"1-Software engineering", "2-Design and analysis of algorithm", "3-Computer networks", "4-Microprocessor and microcontroller", "5-Operating systems", "6-Probability and queueing theory", "7-Operating systems"};
    String[] scsebtwotuesday = {"1-Probability and queueing theory", "2-Design and analysis of algorithm", "3-Computer networks", "4-Software engineering", "5-Microprocessor and microcontroller lab/Operating system lab", "6-Microprocessor and microcontroller lab/Operating system lab", "7-Microprocessor and microcontroller lab/Operating system lab"};
    String[] scsebtwowednesday = {"1-Probability and queueing theory", "2-Operating system lab/Networks lab", "3-Operating system lab/Networks lab", "4-Operating system lab/Networks lab", "5-Microprocessor and microcontroller", "6-Computer networks", "7-Software engineering"};
    String[] scsebtwothursday = {"1-Operating system", "2-network lab/Microprocessor and microcontroller lab", "3-network lab/Microprocessor and microcontroller lab", "4-network lab/Microprocessor and microcontroller lab", "5-Microprocessor and microcontrollere", "6-Computer networks", "7-design and analysis of algorithm"};
    String[] scsebtwofriday = {"1-Computer networks", "2-Probability and queueing theory", "3-Software engineering", "4-Operating systems", "5-Microprocessor and microcontroller", "6-Probability and queueing theory", "7-Library"};

    //cse b 3rd yr
    String[] tcsebtwomonday = {"1-Artificial intelligence", "2-Digital signal processing", "3-Mobile computing", "4-Distributed system", "5-Compiler design", "6-Distributed systems", "7-Total quality management"};
    String[] tcsebtwotuesday = {"1-Compiler design", "2-Total quality management", "3-artificial intelligence", "4-Digital signal processing", "5-Mobile computing", "6-Distributed systems", "7-Mobile computing"};
    String[] tcsebtwowednesday = {"1-Communication and soft skill lab", "2-Communication and soft skill lab", "3-Communication and soft skill lab", "4-Communication and soft skill lab", "5-Digital signal processing", "6-Compiler design", "7-Distributed system"};
    String[] tcsebtwothursday = {"1-Total quality management", "2-Mobile application dev lab/Compiler lab", "3-Mobile application ev lab/Compiler lab", "4-Mobile application dev lab/Compiler lab", "5-Mobile computing", "6-Digital signal processing(tutorial)", "7-Artificial intelligence"};
    String[] tcsebtwofriday = {"1-Digital signal processing", "2-Artificial intelligence", "3-Total quality management", "4-Compiler design", "5-Compiler lab/Mobile app dev lab", "6-Compiler lab/Mobile app dev lab", "7-Compiler lab/Mobile app dev lab"};

    //cse b 4th yr
    String[] frcsebtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsebtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsebtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsebtwothursday = {"1-Multi-core Architecture &programming", "2-Professional ethics and engineering", "3-Multi-core Architecture &programming", "4-Knowledge management", "5-Library", "6-Professional ethics and engineering", "7-Knowledge management"};
    String[] frcsebtwofriday = {"1-Professional ethics and management", "2-Multi-core Architecture &programming", "3-Knowledge management", "4-Project work", "5-Knowledge management", "6-Multi-core Architecture &programming", "7-professional ethics and engineering"};


    //odd sem for second,third and fourth for cse b section

    //cse b 2nd yr
    String[] scsebonemonday = {"1-Environmental Science and Engineering", "2-Mathematics III", "3-Programming and Data Structures II", "4-Operating Systems", "5-Analog and Digital Communiacation", "6-Library", "7-Microprocessor and Microcontrollers"};
    String[] scsebonetuesday = {"1-Programming and Data Structures II", "2-Microprocessor and Microcontrollers", "3-Analog and Digital Communiacation", "4-Mathematics III", "5-Programming and Data Structures lab II/Microprocessor and Microcontrollers lab", "6-Programming and Data Structures lab II/Microprocessor and Microcontrollers lab", "7-Programming and Data Structures lab II/Microprocessor and Microcontrollers lab"};
    String[] scsebonewednesday = {"1-Operating Systems", "2-Microprocessor and Microcontrollers", "3-Mathematics III", "4-Analog and Digital Communiacation", "5-Environmental Science and Engineering", "6-Programming and Data Structures II", "7-Operating Systems"};
    String[] scsebonethursday = {"1-Mathematics III", "2-Operating Systems", "3-Microprocessor and Microcontrollers", "4-Environmental Science and Engineering", "5-Operating Systems lab/Programming and Data Structures lab II", "6-Operating Systems lab/Programming and Data Structures lab II", "7-Operating Systems lab/Programming and Data Structures lab II"};
    String[] scsebonefriday = {"1-Environmental Science and Engineering", "2-Microprocessor and Microcontrollers lab/Operating Systems lab", "3-Microprocessor and Microcontrollers lab/Operating Systems lab", "4-Microprocessor and Microcontrollers lab/Operating Systems lab", "5-Programming and Data Structures II", "6-Mathematics III", "7-Analog and Digital Communiacation"};

    //cse b 3rd yr
    String[] tcsebonemonday = {"1-Internet Programming", "2-Theory of Computation", "3-Computer Graphics", "4-Internet Programming (Tutorial)", "5-Discrete Mathematics", "6-Object Oriented Analysis and Design", "7-SEM 1"};
    String[] tcsebonetuesday = {"1-Theory of Computation", "2-Discrete Mathematics", "3-Object Oriented Analysis and Design", "4-Internet Programming", "5-Case Tools lab/Internet Programming lab", "6-Case Tools lab/Internet Programming lab", "7-Case Tools lab/Internet Programming lab"};
    String[] tcsebonewednesday = {"1-Theory of Computation", "2-Internet Programming", "3-Library", "4-Discrete Mathematics", "5-Internet Programming lab/Computer Graphics lab", "6-Internet Programming lab/Computer Graphics lab", "7-Internet Programming lab/Computer Graphics lab"};
    String[] tcsebonethursday = {"1-Object Oriented Analysis and Design", "2-Computer Graphics", "3-SEM 2", "4-Internet Programming", "5-Computer Graphics", "6-Discrete Mathematics", "7-SEM 3"};
    String[] tcsebonefriday = {"1-Discrete Mathematics", "2-Object Oriented Analysis and Design", "3-Computer Graphcis", "4-Theory of Computation", "5-Computer Graphics lab/Case Tools lab", "6-Computer Graphics lab/Case Tools lab", "7-Computer Graphics lab/Case Tools lab"};

    //cse b 4th yr
    String[] frcsebonemonday = {"1-Ad hoc and Sensor Networks", "2-Resource Management Techniques", "3-Information Retrieval", "4-SEM 1", "5-Cryptography and Network Security", "6-Grid and Cloud Computing", "7-Graph Theory and Applications"};
    String[] frcsebonetuesday = {"1-Cryptography and Network Security", "2-Grid and Cloud Computing", "3-Ad hoc and Sensor Networks", "4-Library", "5-Information Retrieval", "6-Resource Management Techniques", "7-SEM 2"};
    String[] frcsebonewednesday = {"1-Grid and Cloud Computing lab/Security lab", "2-Grid and Cloud Computing lab/Security lab", "3-Grid and Cloud Computing lab/Security lab", "4-Ad hoc and Sensor Networks", "5-Grid and Cloud Computing", "6-Information Retrieval", "7-Cryptography and Network Security"};
    String[] frcsebonethursday = {"1-Security lab/Grid and Cloud Computing lab", "2-Security lab/Grid and Cloud Computing lab", "3-Security lab/Grid and Cloud Computing lab", "4-Information Retrieval", "5-Resource Management Techniques", "6-Graph Theory and Applications", "7-SEM 3"};
    String[] frcsebonefriday = {"1-Graph Theory and Applications", "2-Resource Management Techniques", "3-Cryptography and Network Security", "4-Grid and Cloud Computing", "5-Graph Theory and Applications", "6-Ad hoc and Sensor Networks", "7-SEM 4"};
    //cse c 1st yr
    String[] fcsectwomonday = {"1-Phy and Chem lab II", "2-Phy and Chem lab II", "3-Phy and Chem lab II", "4-Technical english II", "5-Engineering chemistry II", "6-Mathematics II", "7-Engineering physics II"};
    String[] fcsectwotuesday = {"1-PDS I", "2-Engineering physics II", "3-Engineering chemistry II", "4-PDS I", "5-Mathematics II", "6-DPSD", "7-Library"};
    String[] fcsectwowednesday = {"1-Technical english II", "2-Engineering chemistry II", "3-Mathematics II", "4-Engineering physics II", "5-DPSD", "6-Technical english II", "7-PDS I"};
    String[] fcsectwothursday = {"1-DPSD", "2-Mathemaics II", "3-Engineering physics II", "4-Engineering chemistry II", "5-Digital lab/PDS I Lab", "6-Digital lab/PDS I Lab", "7-Digital lab/PDS I Lab"};
    String[] fcsectwofriday = {"1-techincal english II", "2-PDS I", "3-Mathematics II", "4-DPSD", "5-Digital lab/PDS I Lab", "6-Digital lab/PDS I Lab", "7-Digital lab/PDS I Lab"};

    //cse c 2nd yr
    String[] scsectwomonday = {"1-Software engineering", "2-Operating systems", "3-Computer networks", "4-Probability and queueing theory", "5-Operating system", "6-Microprocessors and microcontrollers"};
    String[] scsectwotuesday = {"1-Probability and queueing theory", "2-Operating systems lab/networks lab", "3-Operating systems lab/networks lab", "4-Operating systems lab/networks lab", "5-Operating systems", "6-Computer networks", "7-Software engineering"};
    String[] scsectwowednesday = {"1-probability and queueig theory", "2-Design and analysis of algorithm", "3-Library", "4-Microprocessor and microcontroller", "5-Microprocessor and microcontroller lab/Operating system lab", "6-Microprocessor and microcontroller lab/Operating system lab", "7-Microprocessor and microcontroller lab/Operating system lab"};
    String[] scsectwothursday = {"1-Operating systems", "2-Design and analysis of algorithm", "3-Microprocessor and microcontroller", "4-Probability and queueing theory", "5-Computer networks", "6-Microprocessor and microcontroller", "7-Design and analysis of algorithm"};
    String[] scsectwofriday = {"1-Design and analysis of algorithm", "2-Networks lab/Microprocessor and microcontroller lab", "3-Networks lab/Microprocessor and microcontroller lab", "4-Networks lab/Microprocessor and microcontroller lab", "5-Software engineering", "6-Computer networks", "7-Probability and queuing theory"};

    //cse c 3rd yr
    String[] tcsectwomonday = {"1-Digital signal processing", "2-Mobile computing", "3-Distribute systems", "4-Artificial Intelligence", "5-Compiler design", "6-"};
    String[] tcsectwotuesday = {"1-Compiler design", "2-Disributed systems", "3-Data warehousing and data mining", "4-Digital signal processing", "5-Mobile computing", "6-Aritifical intelligence", "7-Distributed systems"};
    String[] tcsectwowednesday = {"1-Distributed Systems", "2-Digital signal processing", "3-Compiler design", "4-Artificial intelligence", "5-Compiler lab/Mobile application dev lab", "6-5-Compiler lab/Mobile application dev lab", "7-5-Compiler lab/Mobile application dev lab"};
    String[] tcsectwothursday = {"Artificial intelligence", "2-Data warehousing and data mining", "3-Digital signal processing", "4-Mobile computing", "5-Mobile application dev lab/Compiler design lab", "6-5-Mobile application dev lab/Compiler design lab", "7-5-Mobile application dev lab/Compiler design lab"};
    String[] tcsectwofriday = {"1-Data warehousing and data mining", "2-Compiler design", "3-Mobile computing", "4-Data warehousing and data mining", "5-Digital signal processing(tut)", "6-Communication and soft skill lab", "7-Communication and soft skill lab"};

    //cse c 4th yr

    String[] frcsectwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsectwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsectwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frcsectwothursday = {"1-Knowledge management", "2-Multi-core architecture and programming", "3-Knowleddge management", "4-Professional ethics and engineering", "4-project work", "5-knowledge management", "6-professional ethics and engineering", "7-Library"};
    String[] frcsectwofriday = {"1-Multi-core architecture and programming", "2-Knowledge management", "3-Multi-core architecture and programming", "4-professional ethics and engineering", "5-Knowledge management", "6-Professional ethics and engineering", "7-Library"};

            //*** odd sem for second ,third and fourth sem for cse c section

    String[] scseconemonday = {"1-Analog and Digital Communication", "2-Microprocessor and Microcontroller", "3-Operating Systems", "4-Mathematics III", "5-Operating Systems lab/Programming and Data Structures lab II", "6-Operating Systems lab/Programming and Data Structures lab II", "7-Operating Systems lab/Programming and Data Structures lab II"};
    String[] scseconetuesday = {"1-Operating Systemsy", "2-Programming and Data Structures II", "3-Environmental Science and Engineering", "4-Microprocessor and Microcontroller", "5-Mathematics III", "6-Analog and Digital Communication", "7-Programming and Data Structures II"};
    String[] scseconewednesday = {"1-Mathematics III", "2-Operating Systems", "3-Analog and Digital Communication", "4-Microprocessor and Microcontroller", "5-Microprocessor and Microcontroller lab/Operating Systems lab", "6-Microprocessor and Microcontroller lab/Operating Systems lab", "7-Microprocessor and Microcontroller lab/Operating Systems lab"};
    String[] scseconethursday = {"1-Programming and Data Structures II", "2-Programming and Data Structures lab II/Microprocessor and Microcontroller lab", "3-Programming and Data Structures lab II/Microprocessor and Microcontroller lab", "4-Programming and Data Structures lab II/Microprocessor and Microcontroller lab", "5-Library", "6-Environmental Science and Engineering", "7-Mathematics III"};
    String[] scseconefriday = {"1-Environmental Science and Engineering", "2-Mathematics III", "3-Microprocessor and Microcontroller", "4-Analog and Digital Communication", "5-Operating Systems", "6-Programming and Data Structures II", "7-Environmental Science and Engineering"};

    //cse c 3rd yr
    String[] tcseconemonday = {"1-Internet Programming", "2-Computer Graphics", "3-SEM 1", "4-Theory of Computation", "5-Computer Graphics lab/Case Tools lab", "6-Computer Graphics lab/Case Tools lab", "7-Computer Graphics lab/Case Tools lab"};
    String[] tcseconetuesday = {"1-Object Oriented Analysis and Design", "2-Theory of Computation", "3-Internet Programming", "4-Discrete Mathematics", "5-Computer Graphics", "6-Object Oriented Analysis and Design", "7-Discrete Mathematics"};
    String[] tcseconewednesday = {"1-Discrete Mathematics", "2-Computer Graphics", "3-Internet Programming(Tutorial)", "4-Library", "5-Object Oriented Analysis and Design", "6-Theory of Computation", "7-SEM 3"};
    String[] tcseconethursday = {"1-Theory of Computation", "2-Case Tools lab/Internet Programming lab", "3-Case Tools lab/Internet Programming lab", "4-Case Tools lab/Internet Programming lab", "5-Discrete Mathematics", "6-Computer Graphics", "7-Internet Programming"};
    String[] tcseconefriday = {"1-Discrete Mathematics", "2-Internet Programming lab/Computer Graphics lab", "3-Internet Programming lab/Computer Graphics lab", "4-Internet Programming lab/Computer Graphics lab", "5-Object Oriented Analysis and Design", "6-Internet Programming", "7-SEM 2"};

//cse c 4th yr

    String[] frcseconemonday = {"1-Information Retrieval", "2-Grid and Cloud Computing", "3-Cryptography and Network Security", "4-Library", "5-Graph Theory and Application", "6-SEM 2", "7-Ad hoc and Sensor Networks"};
    String[] frcseconetuesday = {"1-Graph Theory and Application", "2-Ad hoc and Sensor Networks", "3-Information Retrieval", "4-Resource Management Techniques", "5-Cryptography and Network Security", "6-Grid and Cloud Computing", "7-SEM 4"};
    String[] frcseconewednesday = {"1-Ad hoc and Sensor Networks", "2-Information Retrieval", "3-Graph Theory and Application", "4-Resource Management Techniques", "5-Grid and Cloud Computing", "6-Cryptography and Network Security", "7-SEM 1"};
    String[] frcseconethursday = {"1-Resource Management Techniques", "2-Information Retrieval", "3-SEM 3", "4-Graph Theory and Application", "5-Security lab/Grid and Cloud Computing lab", "6-Security lab/Grid and Cloud Computing lab", "7-Security lab/Grid and Cloud Computing lab"};
    String[] frcseconefriday = {"1-Grid and Cloud Computing", "2-Cryptography and Network Security", "3-Resource Management Techniques", "4-Ad hoc and Sensor Networks", "5-Grid and Cloud Computing lab/Security lab", "6-Grid and Cloud Computing lab/Security lab", "7-Grid and Cloud Computing lab/Security lab"};
            //*** even sem ece a section
    //ece a first yr
    String[] feceatwomonday = {"1-Electronic devices", "2-Engineering physics II", "3-Engineering chemistry II", "4-Mathematics II", "5-Circuits and devices lab", "6-Circuits and devices lab", "7-Circuits and devices lab"};
    String[] feceatwotuesday = {"1-Engineering chemistry II", "2-Technical english II", "3-Mathematics  II", "4-Circuit theory", "5-Engineering physics II", "6-Electronic device", "7-Circuit theory"};
    String[] feceatwowednesday = {"1-Circuit theory", "2-Engineering chemistry II", "3-Library", "4-Mathematics II", "5-Circuit theory", "6-Circuit theory (t2)/Mathematics II", "7-Technical English II"};
    String[] feceatwothursday = {"1-Circuit theory", "2-Mathematics II", "3-Technicsl english II", "4-Electronic device", "5-Engineering physics II", "6-Engineeinrg chemistry II", "7-Mathematics II"};
    String[] feceatwofriday = {"1-Phy and Chem lab II", "2-Phy and Chem lab II", "3-Phy and Chem lab II", "4-Engineering physics II", "5-Technical english II", "6-Ciruit theory (Tut)", "7-Circuit theory"};

    //ece a second yr

    String[] seceatwomonday = {"1-Probability and random process", "2-Control system engineering", "3-Electronic circuit II", "4-Electromagnetic fields", "5-Linear integrated circuit lab/Electrical engineering and control lab", "6-Linear integrated circuit lab/Electrical engineering and control lab", "7-Linear integrated circuit lab/Electrical engineering and control lab"};
    String[] seceatwotuesday = {"1-Electromagnetic fields", "2-Electronics circuit II", "3-Probability and random, process", "4-Linear integrated circuits", "5-Electromagnetic fields", "6-Control system engineering", "7-Communication theory"};
    String[] seceatwowednesday = {"1-Control system engineering", "2-Linear integrated circuit", "3-Electromagetic fields", "4-Communication theory", "5-Circuits and simulation integrated lab/Electrical engineering and control system lab", "6-Circuits and simulation integrated lab/Electrical engineering and control system lab", "7-Circuits and simulation integrated lab/Electrical engineering and control system lab"};
    String[] seceatwothursday = {"Electronics circuit II", "2-Probability and random process", "3-Communication theory", "4-Control system engineering", "5-Electromagnetic fields(tut)", "6-Probability and random process", "7-Linear integrated circuits"};
    String[] seceatwofriday = {"1-Linear integrated circuits", "2-Circuits and simulation integrated lab/Linear integrated circuit lab", "3-Circuits and simulation integrated lab/Linear integrated circuit lab", "4-Circuits and simulation integrated lab/Linear integrated circuit lab", "5-Probability and random process", "6-Communication theory", "7-Electronics circuit II"};

    //ece a third yr

    String[] teceatwomonday = {"1-VLSI Design", "2-Medical Electronics I", "3-Principle of management", "4-Computer networks", "5-Computer networks lab/VLSI Design lab", "6-Computer networks lab/VLSI Design lab", "7-Computer networks lab/VLSI Design lab"};
    String[] teceatwotuesday = {"1-Communication and soft skill lab", "2-Communication and soft skill lab", "3-Communication and soft skill lab", "4-Communication and soft skill lab", "5-Principles of management", "6-Antena and wave propagation", "7-Computer Architecture"};
    String[] teceatwowednesday = {"1-Medical electronics(Elective I)", "2-Computer networks", "3-Antenna and wave propagation", "4-VLSI Design", "5-Computer Architecture", "6-Principles of management", "7-Library"};
    String[] teceatwothursday = {"1-Computer networks", "2-Antenna and wave propagation", "3-Computer Architecture", "4-Medical electronics", "5-Computer networks lab/VLSI Design lab", "6-Computer networks lab/VLSI Design lab", "7-Computer networks lab/VLSI Design lab"};
    String[] teceatwofriday = {"1-Computer architecture", "2-VLSI Design", "3-Antenna and wave propagation", "4-Principles of management", "5-Computer networks", "6-Medical electronics(Elective I)", "7-VLSI Design"};

    // ece a fourth year

    String[] freceatwomonday={"1-Wireless Communication","2-Wireless Networks","3-Total quality Management","4-Wireless Communication","5-Professional Ethics in Engineering","6-Total quality management","7-Project"};
    String[] freceatwotuesday={"1-Total Quality Management","2-Professional ethics in engineering","3-Wireless networks","4-Project","5-Wireless Networks","6-Wireless Communication","7-Professional ethics in engineering"};
    String[] freceatwowednesday={"1-Wireless Networks","2-Wireless Communication","3-Library","4-Professional ethics in engineering","5-Project","6-Total Quality Management","7-Project"};
    String[] freceatwothursday={"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};
    String[] freceatwofriday={"1-Project work","2-Project work","3-Project work","4-Project work","5-Project work","6-Project work","7-Project work"};


    // ****odd sem for second year,third year and fourth year for ece a section***

    String[] seceaonemonday = {"1-Digital Electronics", "2-Programming and Data Structures", "3-Electrical Engineering and Instrumentation", "4-Electronic Circuits I", "5-Mathematics III", "6-Electromagnetic Fields", "7-Electrical Engineering and Instrumentation"};
    String[] seceaonetuesday = {"1-Electronic Circuits I", "2-Electromagnetic Fields", "3-Programming and Data Structures", "4-Mathematics III", "5-Digital Electronics lab/Programming and Data Structures", "6-Digital Electronics lab/Programming and Data Structures", "7-Digital Electronics lab/Programming and Data Structures"};
    String[] seceaonewednesday = {"1-Electrical Engineering and Instrumentation", "2-Electronic Circuits I", "3-Electromagnetic Fields", "4-Programming and Data Structures", "5-Electromagnetic Fields(Tutorial)/Library", "6-Mathematics III", "7-Digital Electronics"};
    String[] seceaonethursday = {"Mathematics III", "2-Electromagnetic Fields", "3-Digital Electronics", "4-Electrical Engineering and Instrumentation", "5-Analog Circuits lab/Programming and Data Structures", "6-Analog Circuits lab/Programming and Data Structures", "7-Analog Circuits lab/Programming and Data Structures"};
    String[] seceaonefriday = {"1-Programming and Data Structures", "2-Digital Electronics", "3-Mathematics III", "4-Electronic Circuits I", "5-Digital Electronics lab/Analog Circuits lab", "6-Digital Electronics lab/Analog Circuits lab", "7-Digital Electronics lab/Analog Circuits lab"};

    //ece a third yr

    String[] teceaonemonday = {"1-Principles of Digital Signal Processing", "2-Communication System lab/Microprocessor and Microcontroller lab", "3-Communication System lab/Microprocessor and Microcontroller lab", "4-Communication System lab/Microprocessor and Microcontroller lab", "5-Environmental Science and Engineering", "6-Microprocessor and Microcontroller", "7-Transmission Lines and Waveguides(Tutorial)"};
    String[] teceaonetuesday = {"1-Microprocessor and Microcontroller", "2-Principles of Digital Signal Processing", "3-Transmission Lines and Waveguides", "4-Digital Communication", "5-Principles of Digital Signal Processing", "6-Transmission Lines and Waveguides", "7-Environmental Science and Engineering"};
    String[] teceaonewednesday = {"1-Environmental Science and Engineering", "2-Transmission Lines and Waveguides", "3-SEM 1", "4-Digital Communication", "5-Microprocessor and Microcontroller", "6-Library", "7-Principles of Digital Signal Processing(Tutorial)"};
    String[] teceaonethursday = {"1-Digital Communication", "2-SEM 2", "3-Microprocessor and Microcontroller", "4-Environmental Science and Engineering", "5-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "6-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "7-Digital Signal Processing lab/Microprocessor and Microcontroller lab"};
    String[] teceaonefriday = {"1-Transmission Lines and Waveguides", "2-Digital Communication", "3-SEM 3", "4-Principles of Digital Signal Processing", "5-Digital Signal Processing lab/Communication System lab", "6-Digital Signal Processing lab/Communication System lab", "7-Digital Signal Processing lab/Communication System lab"};

// ece a fourth year

    String[] freceaonemonday = {"1-Satellite Communication/Digital Image Processing", "2-RF and Microwave Engineering", "3-Embedded and Real Time Systems", "4-Advanced Computer Architecture", "5-Optical Communication and Networks", "6-Embedded and Real Time Systems", "7-Advanced Microprocessors and Microcontrollers"};
    String[] freceaonetuesday = {"1-Embedded lab/Optical and Microwave lab", "2-Embedded lab/Optical and Microwave lab", "3-Embedded lab/Optical and Microwave lab", "4-Satellite Communication/Digital Image Processing", "5-Advanced Computer Architecture", "6-RF and Microwave Engineering", "7-SEM 1"};
    String[] freceaonewednesday = {"1-Advanced Microprocessors and Microcontrollers", "2-Optical Communication and Networks", "3-SEM 2", "4-Satellite Communication/Digital Image Processing", "5-RF and Microwave Engineering", "6-SEM 3", "7-Embedded and Real Time Systems"};
    String[] freceaonethursday = {"1-Embedded and Real Time Systems", "2-Advanced Computer Architecture", "3-Advanced Microprocessors and Microcontrollers", "4-Optical Communication and Networks", "5-Embedded lab/Optical and Microwave lab", "6-Embedded lab/Optical and Microwave lab", "7-Embedded lab/Optical and Microwave lab"};
    String[] freceaonefriday = {"1-Advanced Computer Architecture", "2-Satellite Communication/Digital Image Processing", "3-SEM 4", "4-Advanced Microprocessors and Microcontrollers", "5-Library", "6-RF and Microwave Engineering", "7-Optical Communication and Networks"};
    // even sem for ece b section


    //ece b first year

    String[] fecebtwomonday={"1-Mathematics II","2-Electronics Devices","3-Engineering Chemistry II","4-Engineering Physics II","5-Phy and Chem lab II","6-Phy and Chem lab II","7-Phy and Chem lab II"};
    String[] fecebtwotuesday={"1-Circuits and Devices Lab","2-Circuits and Devices Lab","3-Circuits and Devices Lab","4-Technical English II","5-Circuit Theory","6-Engineering chemistry II","7-Mathematics II/Circuit theory"};
    String[] fecebtwowednesday={"1-engineering physics II","2-Electronic Devices","3-Mathematics II","4-Electronic Devices","'5-Circuit Theory","6-Mathematics II","7-Library"};
    String[] fecebtwothursday={"1-Circuit theory","2-Engineering Physics II","3-Engineering Chemistry II","4-Electronic Devices","5-Mathematics II","6-Circuit theory","7-Technical English II"};
    String[] fecebtwofriday={"1-Technical English II","2-Circuit Theory","3-Electronic devices(T)","4-Mathemactics II","5-Technical English II","6-Engineering Chemistry II","7-Engineering Physics II"};



    //ece b 2nd yr
    String[] secebtwomonday = {"1-Linear integrated circuits", "2-Control systems engineering", "3-Probability and random process", "4-Communication theory", "5-Control system engineering", "6-Electromagnetic fields", "7-Electronic circuits II"};
    String[] secebtwotuesday = {"1-Electronic circuits II", "2-Linear integrated circuits", "3-Commnication theory", "4-Probabiliy and random process", "5-Electromagnetic fields", "6-Electronic circuits II", "7-Control systems engineering"};
    String[] secebtwowednesday = {"1-Probability and random process", "2-Circuits and simulation integration lab/electrical engineering and control system lab", "3-Circuits and simulation integration lab/electrical engineering and control system lab", "4-Circuits and simulation integration lab/electrical engineering and control system lab", "5-Linear integrated circuits", "6-Communication theory", "7-Electromagnetic fields(t)"};
    String[] secebtwothursday = {"1-Control system engineering", "2-Probability and random process", "3-Linear integrated circuits", "4-Electromagnetci fields", "5-Circuits and simulation integrated lab/Linear integrated circuit lab", "6-Circuits and simulation integrated lab/Linear integrated circuit lab", "7-Circuits and simulation integrated lab/Linear integrated circuit lab"};
    String[] secebtwofriday = {"1-Communication theory", "2-Electromagnetic fields", "3-Electronic circuits II", "4-Probability and random process", "5-Linear integrated circuit lab/Electrical engineering and control system lab", "6-Linear integrated circuit lab/Electrical engineering and control system lab", "7-Linear integrated circuit lab/Electrical engineering and control system lab"};

    //ece b 3rd yr
    String[] tecebtwomonday = {"1-Medical electronics(elective I)", "2-computer architecture", "3-Copmuter networks", "4-VLSI Design", "5-Computer architecture", "6-Antenna and wave propagation", "7-Principles of management"};
    String[] tecebtwotuesday = {"1-Antenna and wave propagation", "2-Computer networks lab/VLSI design lab", "3-Computer networks lab/VLSI design lab", "4-Computer networks lab/VLSI design lab", "5-Computer networks", "6-VLSI Design", "7-Medical electronics(elective I)"};
    String[] tecebtwowednesday = {"1-VLSI Design", "2-Computer networks", "3-Medical electronics (elective I)", "4-Antenna and wave propagation", "5-Principles of management", "6-Commmunication and soft skills lab", "7-Communication and soft skills lab"};
    String[] tecebtwothursday = {"1-Principles of management", "2-Antenna and wave propagation", "3-Computer architecture", "4-Medical electronics(elective I)", "5-Library", "6-Communication and soft skills lab","7-Communication and soft skills lab"};
    String[] tecebtwofriday = {"1-Computer Architecture", "2-Antenna and wave propagation", "3-Principles of management", "4-Computer networks", "5-Computer networks lab/VLSI Design lab", "6-Computer networks lab/VLSI Design lab", "7-Computer networks lab/VLSI Design lab"};

    //ece b 4th yr

    String[] frecebtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecebtwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecebtwowednesday = {"-wireless communication", "2-Wireless networks", "3-Total quality management", "4-Project", "5-Wireless networks", "6-Project", "7-Professional ethics in engineering"};
    String[] frecebtwothursday = {"1-Total quality management", "2-Wireless communication", "3-Library", "4-Wireless networks", "5-Professional ethics in engineering", "6-Wireless communication", "7-project"};
    String[] frecebtwofriday = {"1-Professional ethics in engineering", "2-Total quality management", "3-wireless networks", "4-Professional ethics in engineering", "5-Wireless communication", "6-Project", "7-Total quality management"};


    // odd sem for second,third and fourth year for ece b section

    //ece b 2nd yr
    String[] secebonemonday = {"1-Electrical Engineering and Instrumentation", "2-Mathematics III", "3-Programming and Data Structures", "4-Electromagnetic Fields", "5-Analog Circuits lab/Programming and Data Structures lab", "6-Analog Circuits lab/Programming and Data Structures lab", "7-Analog Circuits lab/Programming and Data Structures lab"};
    String[] secebonetuesday = {"1-Digital Electronics", "2-Electrical Engineering and Instrumentation", "3-Electronic Circuits I", "4-Programming and Data Structures", "5-Digital Electronics lab/Analog Circuits lab", "6-Digital Electronics lab/Analog Circuits lab", "7-Digital Electronics lab/Analog Circuits lab"};
    String[] secebonewednesday = {"1-Electromagnetic Fields", "2-Programming and Data Structures", "3-Electrical Engineering and Instrumentation", "4-Digital Electronics", "5-Electronic Circuits I", "6-Mathematics III", "7-Electrical Engineering and Instrumentation"};
    String[] secebonethursday = {"1-Mathematics III", "2-Digital Electronics", "3-Electronic Circuits I", "4-Electromagnetic fields(Tutorial)", "5-Mathematics III", "6-Digital Electronics", "7-Electromagnetic field"};
    String[] secebonefriday = {"1-Programming and Data Structures", "2-Electronic Circuits I", "3-Mathematics III", "4-Electromagnetic Fields", "5-Digital Electronics lab/Programming and Data Structures lab", "6-Digital Electronics lab/Programming and Data Structures lab", "7-Digital Electronics lab/Programming and Data Structures lab"};

    //ece b 3rd yr
    String[] tecebonemonday = {"1-Microprocessor and Microcontroller", "2-Principles of Digital Signal Processing", "3-Digital Communication", "4-Environmental Science and Engineering", "5-Transmission Lines and Waveguides", "6-SEM 1", "7-Principles of Digital Signal Processing(Tutorial)"};
    String[] tecebonetuesday = {"1-Environmental Science and Engineering", "2-Transmission Lines and Waveguides", "3-Principles of Digital Signal Processing", "4-Microprocessor and Microcontroller", "5-Digital Signal Processing lab/Communication System lab", "6-Digital Signal Processing lab/Communication System lab", "7-Digital Signal Processing lab/Communication System lab"};
    String[] tecebonewednesday = {"1-Digital Communication", "2-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "3-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "4-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "5-Library", "6-Microprocessor and Microcontroller", "7-Transmission Lines and Waveguides"};
    String[] tecebonethursday = {"1-Transmission Lines and Waveguides", "2-Environmental Science and Engineering", "3-Microprocessor and Microcontroller", "4-Digital Communication", "5-Transmission Lines and Waveguides(Tutorial)","6-Principles of Digital Signal Processing", "7-SEM 2"};
    String[] tecebonefriday = {"1-Principles of Digital Signal Processing", "2-Communication System lab/Microprocessor and Microcontroller lab", "3-Communication System lab/Microprocessor and Microcontroller lab", "4-Communication System lab/Microprocessor and Microcontroller lab", "5-Environmental Science and Engineering", "6-Digital Communication", "7-SEM 3"};

//ece b 4th yr

    String[] frecebonemonday = {"1-RF and Microwave Engineering", "2-Advanced Microprocessors and Microcontrollers", "3-Embedded and Real Time Systems", "4-SEM 1", "5-Optical Communication and Networks", "6-Advanced Computer Architecture", "7-SEM 2"};
    String[] frecebonetuesday = {"1-Satellite Communication", "2-Advanced Computer Architecture", "3-RF and Microwave Engineering", "4-Optical Communication and Networks", "5-Embedded and Real Time Systems", "6-SEM 3", "7-Advanced Microprocessors and Microcontrollers"};
    String[] frecebonewednesday = {"1-Optical Communication and Networks", "2-Advanced Microprocessors and Microcontrollers", "3-Satellite Communication", "4-SEM 4", "5-Embedded lab/Optical and Microwave lab", "6-Embedded lab/Optical and Microwave lab", "7-Embedded lab/Optical and Microwave lab"};
    String[] frecebonethursday = {"1-Embedded lab/Optical and Microwave lab", "2-Embedded lab/Optical and Microwave lab", "3-Embedded lab/Optical and Microwave lab", "4-Advanced Computer Architecture", "5-Satellite Communication", "6-RF and Microwave Engineering", "7-Embedded and Real Time Systems"};
    String[] frecebonefriday = {"1-Advanced Microprocessors and Microcontrollers", "2-Embedded and Real Time Systems", "3-Advanced Computer Architecture", "4-Library", "5-RF and Microwave Engineering", "6-Satellite Communication", "7-Optical Communication and Networks"};

    //ece c first yr
    String[] fecectwomonday={"1-Circuits and devices lab","2-Circuits and devices lab","3-Circuits and devices lab","4-Mathematics II","5-Circuit theory(Tut)","6-Electronic device","7-Engineering physics II"};
   // String[] fecectwomonday = {"1-Circuits and devices lab","2-Circuits and devices lab","3-Circuits and devices lab","4-Mathematics II","5-Circuit theory(Tut)","6-Electronic device","7-Engineering physics II"};
    String[] fecectwotuesday = {"1-Mathematics II", "2-Engineering chemistry II", "3-Electronic device(Tut)", "4-Engineering physics II", "5-Electronic devices", "6-Mathematics II", "7-Engineering Chemistry II"};
    String[] fecectwowednesday = {"1-Phy and Chem lab II", "2-Phy and Chem lab II", "3-Phy and Chem lab II", "4-Circuit theory", "5-Technical english II", "6-Engineering physics II", "7-Mathematics/Circuit theory(Tut)"};
    String[] fecectwothursday = {"1-Mathematics II", "2-Circuit theory", "3-Electronic device", "4-Engineering chemistry II", "5-Circuit theory", "6-Library", "7-Technical english II"};
    String[] fecectwofriday = {"1-Electronic device", "2-Engineering physics II", "3-Technical english II", "4-Mathematics II", "5-Engineering chemistry II", "6-Technical english II", "7-Circuit theory"};

    // ece 2nd year

    String[] secectwomonday={"1-Electromagnetic fields","2-Linear Integrated circuit lab/Electrical engineering and control lab","3-Linear Integrated circuit lab/Electrical engineering and control lab","4-Linear Integrated circuit lab/Electrical engineering and control lab","5-Probability and random process","6-Communication theory","7-Control System engineering"};
    String[] secectwotuesday={"1-Linear integrated circuits","2-Electronic circuits II","3-Electromagnetic fields","4-Probability and random process","5-Circuits and simulation integrated lab/Electrical engineering and control lab","6-Circuits and simulation integrated lab/Electrical engineering and control lab","7-Circuits and simulation integrated lab/Electrical engineering and control lab"};
    String[] secectwowednesday={"1-Communication theory","2-Control system engineering","3-Probability and random process","4-Electromagnetic fields","5-Linear integrated circuits","6-Control system engineering","7-Communication theory"};
    String[] secectwothursday={"1-Elecrtonic circuits II","2-Circuits and simulation integrated lab/Linear integrated circuit lab","3-Circuits and simulation integrated lab/Linear integrated circuit lab","4-Circuits and simulation integrated lab/Linear integrated circuit lab","5-Electromagnetic fields","6-Control system engineering","7-Communication theory"};
    String[] secectwofriday={"1-Probability and random process","2-Communication theory","3-Control system engineering","4-Linear integrated circuits","5-Electronic circuits II","6-Electromagnetic fields(T)","7-Probability and random process"};

    //ece c 3rd yr
    String[] tecectwomonday = {"1-Medical electronics", "2-Antenna and wave propagation", "3-VLSI Design", "4-Computer Architecture", "5-Computer networks", "6-Antenna and wave propagation", "7-Principles of management"};
    String[] tecectwotuesday = {"1-VLSI Design", "2- Computer networks", "3-Computer Architecture", "4-principles of management", "5-Computer networks lab/VLSI Design lab", "6-Computer networks lab/VLSI Design lab", "7-Computer networks lab/VLSI Design lab"};
    String[] tecectwowednesday = {"1-Antenna and wave propagation", "2-Medical electronics", "3-Principles of management", "4-VLSI Design", "5-Computer networks lab/VLSI Design lab", "6-Computer networks lab/VLSI Design lab", "7-Computer networks lab/VLSI Design lab"};
    String[] tecectwothursday = {"1-Principles of management", "2-Computer architecture", "3-Medical electronics", "4-Library", "5-Computer networks", "6-VLSI Design", "7-Antenna and wave propagation"};
    String[] tecectwofriday = {"1-Communication and soft skills lab", "2-Communication and soft skills lab", "3-Communication and soft skills lab", "4-Communication and soft skills lab", "5-Computer architecture", "6-Computer networks", "7-Medical electronics"};

    //ece c 4th yr
    String[] frecectwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecectwotuesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frecectwowednesday = {"1-Total quality management", "2-Wireless communication", "3-Professional ethics in engineering", "4-Wireless networks", "5-Total quality management", "6-Wireless networks", "7-Wireless communication"};
    String[] frecectwothursday = {"1-Wireless networks", "2-Project", "3-Total quality management", "4-Professional ethics in engineering", "5-project", "6-Wireless networks", "7-Wireless communication"};
    String[] frecectwofriday = {"1-Wireless communication", "2-Professional ethics in engineering", "3-Library", "4-Wireless communication", "5-Wireless networks", "6-Total quality management", "7-project"};

    // odd sem for second,third and fourth year ece c section

    String[] sececonemonday = {"1-Digital Electronics", "2-Electromagnetic Fields", "3-Mathematics III", "4-Electronic Circuits I", "5-Electromagnetic Fields", "6-Programming and Data Structures", "7-Electrical Engineering and Instrumentation"};
    String[] sececonetuesday = {"1-Programming and Data Structures", "2-Digital Electronics lab/Analog Circuits lab", "3-Digital Electronics lab/Analog Circuits lab", "4-Digital Electronics lab/Analog Circuits lab", "5-Mathematics III", "6-Electromagnetic Fields(Tutorial)/Library", "7-Electronic Circuits I"};
    String[] sececonewednesday = {"1-Mathematics III", "2-Digital Electronics", "3-Programming and Data Structures", "4-Electrical Engineering and Instrumentation", "5-Analog Circuits lab/Programming and Data Structures", "6-Analog Circuits lab/Programming and Data Structures", "7-Analog Circuits lab/Programming and Data Structures"};
    String[] sececonethursday = {"1-Electronic Circuits I", "2-Digital Electronics lab/Programming and Data Structures", "3-Digital Electronics lab/Programming and Data Structures", "4-Digital Electronics lab/Programming and Data Structures", "5-Electrical Engineering and Instrumentation", "6-Digital Electronics", "7-Mathematics III"};
    String[] sececonefriday = {"1-Electromagnetic Fields", "2-Electrical Engineering and Instrumentation", "3-Mathematics III", "4-Computer Architecture", "5-Digital Electronics", "6-Electronic Circuits I", "7-Programming and Data Structures"};

    //ece c 3rd yr
    String[] tececonemonday = {"1-Microprocessor and Microcontroller", "2-Transmission Lines and Waveguides", "3-Principles of Digital Signal Processing", "4-Digital Communication", "5-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "6-Digital Signal Processing lab/Microprocessor and Microcontroller lab", "7-Digital Signal Processing lab/Microprocessor and Microcontroller lab"};
    String[] tececonetuesday = {"1-Transmission Lines and Waveguides", "2- Principles of Digital Signal Processing", "3-Environmental Science and Engineering", "4-Microprocessor and Microcontroller", "5-Transmission Lines and Waveguides", "6-Principles of Digital Signal Processing", "7-SEM 1"};
    String[] tececonewednesday = {"1-Environmental Science and Engineering", "2-Digital Communication", "3-Microprocessor and Microcontroller", "4-SEM 2", "5-Communication System lab/Microprocessor and Microcontroller lab", "6-Communication System lab/Microprocessor and Microcontroller lab", "7-Communication System lab/Microprocessor and Microcontroller lab"};
    String[] tececonethursday = {"1-Digital Communication", "2-Digital Signal Processing lab/Communication System lab", "3-Digital Signal Processing lab/Communication System lab", "4-Digital Signal Processing lab/Communication System lab", "5-Environmental Science and Engineering", "6-SEM 3", "7-Transmission Lines and Waveguides (Tutorial)"};
    String[] tececonefriday = {"1-Principles of Digital Signal Processing", "2-Digital Communication", "3-Transmission Lines and Waveguides", "4-Principles of digital signal processing(Tutorial)", "5-Library", "6-Microprocessor and Microcontroller", "7-Environmental Science and Engineering"};

    //ece c 4th yr
    String[] frececonemonday = {"1-Satellite Communication/Digital Image Processing", "2-Advanced Microprocessors and Microcontrollers", "3-Embedded and Real Time Systems", "4-Advanced Computer Architecture", "5-Embedded lab/Optical and Microwave lab", "6-Embedded lab/Optical and Microwave lab", "7-Embedded lab/Optical and Microwave lab"};
    String[] frececonetuesday = {"1-Optical Communication and Networks", "2-SEM 1", "3-RF and Microwave Engineering", "4-Satellite Communication/Digital Image Processing", "5-Advanced Computer Architecture", "6-Advanced Microprocessors and Microcontrollers", "7-SEM 2"};
    String[] frececonewednesday = {"1-Embedded lab/Optical and Microwave lab", "2-Embedded lab/Optical and Microwave lab", "3-Embedded lab/Optical and Microwave lab", "4-Satellite Communication/Digital Image Processing", "5-Embedded and Real Time Systems", "6-Optical Communication and Networks", "7-RF and Microwave Engineering"};
    String[] frececonethursday = {"1-Advanced Microprocessors and Microcontrollers", "2-RF and Microwave Engineering", "3-Optical Communication and Networks", "4-Advanced Computer Architecture", "5-Library", "6-Embedded and Real Time Systems", "7-SEM 3"};
    String[] frececonefriday = {"1-Embedded and Real Time Systems", "2-Satellite Communication/Digital Image Processing", "3-Advanced Computer Architecture", "4-Optical Communication and Networks", "5-RF and Microwave Engineering", "6-SEM 4", "7-Advanced Microprocessors and Microcontrollers"};

    //even sem eee a full

    String[] feeeatwomonday = {"1-Engineering chemistry II", "2-Engineering physics II", "3-Basic CE", "4-Technical english II", "5-Electronics circuit lab", "6-Electronics circuit lab", "7-Electronics circuit lab"};
    String[] feeeatwotuesday = {"1-Engineering physics II", "2-Circuit theory", "3-Mathematics II", "4-Engineering chemistry II", "5-CP Lab", "6-CP Lab", "7-CP Lab"};
    String[] feeeatwowednesday = {"1-Mathematics II", "2-Engineering chemistry II", "3-Basic ME", "4-Mathematics II", "5-Technical english II", "6-Circuit theory", "7-Basic CE"};
    String[] feeeatwothursday = {"1-Phy and Chem lab II", "2-Phy and Chem lab II", "3-Phy and Chem lab II", "4-Mathematics II", "5-Circuit theory", "6-Engineering physics II", "7-Technical english II"};
    String[] feeeatwofriday = {"1-Circuit theory ", "2-technial English II", "3-Mathematics II", "4-Engineering chemistry II", "5-Engineering physics II", "6-Basic ME", "7-Circuit theory"};

    String[] seeeatwomonday = {"1-Electrical methods I", "2-Numerical methods", "3-Transmissions and distribution", "4-Object oriented programming", "5-Oops lab/EM I lab", "6-Oops lab/EM I lab", "7-Oops lab/EM I lab"};
    String[] seeeatwotuesday = {"1-Object oriented programming", "2-Discrete time systems and Signal processing", "3-Electrical machines I", "4-Measurements and Instrumentation", "5-Library", "6-Numerical methods", "7-Transmissions and distributions"};
    String[] seeeatwowednesday = {"1-Discrete time systems and Signal processing", "2-Measurements and instrumentation", "3-Numerical methods", "4-Transmissions and distributions", "5-Electrical methods I", "6-Object oriented programming", "7-Discrete time systems and Signal processing(Tut)"};
    String[] seeeatwothursday = {"1-Numerical methods", "2-Electrical machines I", "3-Measurements and instrumentation", "4-Discrete time systems and Signal processing", "5-EM I lab/Oops Lab", "6-EM I lab/Oops Lab", "7-EM I lab/Oops Lab"};
    String[] seeeatwofriday = {"1-Transmissions and distributions", "2-Object oriented programming", "3-Discrete time systems and signal processing", "4-Electrical machines I", "5-Numerical methods", "6-Measurements and Instrumentation", "7-Seminar"};

    String[] teeeatwomonday = {"1-Communication engineering", "2-Solid state drives", "3-Embedded systems", "4-Design of electrical machines", "5-PED lab/uP and uC lab", "6-PED lab/uP and uC lab", "7-PED lab/uP and uC lab"};
    String[] teeeatwotuesday = {"1-Design of electrical machines", "2-Power system operation and control", "3-Communcation engineering", "4-Solid state drives", "'5-Visual language and its applications", "6-Embedded systems", "7-Library"};
    String[] teeeatwowednesday = {"1-Solid state drives", "2-Visual language and its applications", "3-Power systems operation and control", "4-Embedded systems", "5-Solid state drives", "6-Power systems operation and control", "7-Communication engineering"};
    String[] teeeatwothursday = {"1-embedded systems", "2-Design of electrical methods", "3-Visual language and its applications", "4-design of electrical methods", "5-PED lab/uP and uC lab", "6-PED lab/uP and uC lab", "7-PED lab/uP and uC lab"};
    String[] teeeatwofriday = {"1-Power systems operation and control", "2-Solid state drives", "3-Communication engineering", "4-design of electrical methods", "5-PSTS SAM", "6-PSTS KS", "7-PSTS KS"};

    String[] freeeatwomonday = {"1-Power electronics for renewable energy systems", "2-Professional ethics in engineering", "3-Electric energy generation,utilization and conservation", "4-Professional ethics in engineering", "5-Electric energy generation,utilization and conservation", "6-Power electronics for renewable energy systems", "7-Library VMR"};
    String[] freeeatwotuesday = {"1-Electric energy generation,utilization and conservation", "2-Power electronics for renewable energy systems", "3-Professional ethics in engineering", "4-Power electronics for renewable energy systems", "5-Electric energy generation,utilization and conservation", "6-Seminar STM", "7-Professional ethics in engineering"};
    String[] freeeatwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] freeeatwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] freeeatwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};

    // second,third and fourth year odd sem eee a section


    String[] seeeaonemonday = {"1-Electrical machines I", "2-Electrical Machines I lab/Programming and Data Structures lab", "3-Electrical Machines I lab/Programming and Data Structures lab", "4-Electrical Machines I lab/Programming and Data Structures lab", "5-Mathematics III", "6-Electronic Devices and Circuits", "7-Electromagnetic Theory"};
    String[] seeeaonetuesday = {"1-Programming and Data Structures", "2-Measurements and Instrumentation", "3-Mathematics III", "4-Measurements and Instrumentation", "5-Programming and Data Structures lab/Electronic Devices and Circuits lab", "6-Programming and Data Structures lab/Electronic Devices and Circuits lab", "7-Programming and Data Structures lab/Electronic Devices and Circuits lab"};
    String[] seeeaonewednesday = {"1-Electronic Devices and Circuits", "2-Electrical Machines I", "3-Programming and Data Structures", "4-Mathematics III", "5-Electromagnetic Theory", "6-Electronic Devices and Circuits", "7-Measurements and Instrumentation"};
    String[] seeeaonethursday = {"1-Mathematics III", "2-Programming and Data Structures", "3-Electrical Machines I", "4-Electromagnetic Theory", "5-Electronic Devices and Circuits lab/Electrical Machines I lab", "6-Electronic Devices and Circuits lab/Electrical Machines I lab", "7-Electronic Devices and Circuits lab/Electrical Machines I lab"};
    String[] seeeaonefriday = {"1-Measurements and Instrumentation", "2-Electromagnetic Theory", "3-Electrical Machines I", "4-Electronic Devices and Circuits", "5-Electrical Machines I", "6-Mathematics III", "7-Programming and Data Structures"};

    String[] teeeaonemonday = {"1-Control Systems", "2-Electrical Machines II", "3-Power Plant Engineering", "4-Power Electronics", "5-Control and Instrumentation lab/Electrical Machines lab", "6-Control and Instrumentation lab/Electrical Machines lab", "7-Control and Instrumentation lab/Electrical Machines lab"};
    String[] teeeaonetuesday = {"1-Communication Skills-Laboratory Based", "2-Communication Skills-Laboratory Based", "3-Communication Skills-Laboratory Based", "4-Communication Skills-Laboratory Based", "'5-Power System Analysis ", "6-Microprocessors and Microcontrollers", "7-Electrical Machines II/Control Systems"};
    String[] teeeaonewednesday = {"1-Power System Analysis ", "2-Microprocessors and Microcontrollers", "3-Electrical Machines II", "4-Control Systems", "5-Electrical Machines II", "6-Power Plant Engineering", "7-Power Electronics"};
    String[] teeeaonethursday = {"1-Electrical Machines II", "2-Power Plant Engineering", "3-Power System Analysis ", "4-Microprocessors and Microcontrollers", "5-Electrical Machines lab/Control and Instrumentation lab", "6-Electrical Machines lab/Control and Instrumentation lab", "7-Electrical Machines lab/Control and Instrumentation lab"};
    String[] teeeaonefriday = {"1-Power Electronics", "2-Control Systems", "3-Power Electronics", "4-Power Plant Engineering", "5-Microprocessors and Microcontrollers", "6-Control Systems", "7-Power System Analysis "};

    String[] freeeaonemonday = {"1-Protection & Switchgear", "2-Fundamentals of Nanoscience/Microcontroller Based System Design", "3-Bio-Medical Instrumentation", "4-Fundamentals of Nanoscience/Microcontroller Based System Design", "5-High Voltage Engineering", "6-Special Electrical Machines", "7-SEMR SVS"};
    String[] freeeaonetuesday = {"1-Special Electrical Machines", "2-Principles of Management", "3-Fundamentals of Nanoscience/Microcontroller Based System Design", "4-Principles of Management", "5-Library MSK", "6-High Voltage Engineering", "7-Bio-Medical Instrumentation"};
    String[] freeeaonewednesday = {"1-Power System Simulation lab/Comprehension", "2-Power System Simulation lab/Comprehension", "3-Power System Simulation lab/Comprehension", "4-Protection & Switchgear", "5-Principles of Management", "6-Protection & Switchgear", "7-Special Electrical Machines"};
    String[] freeeaonethursday = {"1-Bio-Medical Instrumentation", "2-Special Electrical Machines", "3-High Voltage Engineering", "4-Principles of Management", "5-SST SAV", "6-SST X4", "7-SST X4"};
    String[] freeeaonefriday = {"1-High Voltage Engineering", "2-Protection & Switchgear", "3-Fundamentals of Nanoscience/Microcontroller Based System Design", "4-Bio-Medical Instrumentation", "5-Power System Simulation lab/Comprehension", "6-Power System Simulation lab/Comprehension", "7-Power System Simulation lab/Comprehension"};

    //even sem eee b section full
    String[] feeebtwomonday = {"1-Basic CE", "2-Circuit theory", "3-Engineering chemistry II", "4-Technical english II", "5-Engineering physics II", "6-Engineering chemistry II", "7-Mathematics II"};
    String[] feeebtwotuesday = {"1-Phy and Chem lab II", "2-Phy and Chem lab II", "3-Phy and Chem lab II", "4-Engineering physics II", "5-Mathematics II", "6-Circuit theory", "7-Engineering chemistry II"};
    String[] feeebtwowednesday = {"1-CP Lab", "2-CP Lab", "3-CP Lab", "4-Mathematics II", "5-Technical english II", "6-Engineering physics II", "7-Circuit theory"};
    String[] feeebtwothursday = {"1-Technical english II", "2-Basic ME", "3-Circuit theory", "4-Mathematics II", "5-Electronics circuit lab", "6-Electronics circuit lab", "7-Electronics circuit lab"};
    String[] feeebtwofriday = {"1-Basic CE", "2-Mathematics II", "3-Engineering physics II", "4-Basic ME", "5-Circuit theory", "6-Engineering chemistry II", "7-Technical english II"};

    String[] seeebtwomonday = {"1-Transmission and distribution", "2-Dicrete time systems and signal processing", "3-Measurement and instrumentation", "4-Numericsl methods", "5-Library SSM", "6-Transmission and distribution", "7-Electrical machines I"};
    String[] seeebtwotuesday = {"1-Object oriented programming", "2-transmission and distributions", "3-Electrical machines I", "4-Measurements and Instrumentation", "5-OOPS LAB/EM I LAB", "'6-OOPS LAB/EM I LAB", "7-OOPS LAB/EM I LAB"};
    String[] seeebtwowednesday = {"1-Numerical methods", "2-Object oriented programming", "3-Electrical machines I", "4-Dicrete time systems and signal processing", "5-Numerical methods", "6-Object oriented programming", "7-Seminar DA"};
    String[] seeebtwothursday = {"1-Discrete time system and signal processing", "2-EM I LAB/OOPS LAB", "3-EM I LAB/OOPS LAB", "4-EM I LAB/OOPS LAB", "5-Electrical machines I", "6-Measuremetns and instrumentation", "7-Numerical methods"};
    String[] seeebtwofriday = {"1-Electrical machines I", "2-Measurements and instrumentation", "3-Numerical methods", "4-Transmissions and distributions", "5-object oriented  programming", "6-Discrete time system and signal processing", "7-Discrete time signal and processing(Tut)"};

    String[] teeebtwomonday = {"1-Design of electrical machines", "2-Commnication engineering", "3-Embedded systems", "4-Optimization technique", "5-Power system operation and control", "6-Solid state design", "7-design of electrical machine"};
    String[] teeebtwotuesday = {"1-Solid state design", "2-Embedded systems", "3-Optimization technique", "4-Power system optimization and control", "5-PED LAB/uP AND uC LAB", "6-PED LAB/uP AND uC LAB", "7-PED LAB/uP AND uC LAB"};
    String[] teeebtwowednesday = {"1-Optimization technique", "2-Power system operation and control", "3-Design of electrical machine", "4-Library STM", "5-Solid state design", "6-Communication engineering", "7-Embedded systems"};
    String[] teeebtwothursday = {"1-Power system operation and control", "2-Design of electrical methods", "3-Communication engineering", "4-Embedded systems", "5-PSTS ASK", "6-PSTS ASK", "7-PSTS GSK"};
    String[] teeebtwofriday = {"1-Communication engineering", "2-Optimization methods", "3-Solid state drives", "4-Design of electrical machine", "5-uP AND uC LAB/PED LAB", "6-uP AND uC LAB/PED LAB", "7-uP AND uC LAB/PED LAB"};

    String[] freeebtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] freeebtwotuesday = {"1-Project work\",\"2-Project work\",\"3-Project work\",\"4-Project work\",\"5-Project work\",\"6-Project work\",\"7-Project work"};
    String[] freeebtwowednesday = {"1-Electrical energy generation,utilization and conservation", "2-Professional ethics in engineering", "3-Electrical energy generation,utilization and conservation", "4-Power electronics for renewable energy system", "5-professional ethics in engineering", "6-Electrical energy generation,utilization and conservation", "7-Professional ethics in engineering"};
    String[] freeebtwothursday = {"1-Power electronics for renewable energy system", "2-Professional ethics in engineering", "3-Power electronics for renewable energy system", "4-Electrical energy generation,utilization and conservation", "5-Library CV", "6-Electrical energy generation,utilization and conservation", "7-Professional ethics in engineering"};
    String[] freeebtwofriday = {"1-Project work\",\"2-Project work\",\"3-Project work\",\"4-Project work\",\"5-Project work\",\"6-Project work\",\"7-Project work"};

    //odd sem for second,third and fourth year eee b section

    String[] seeebonemonday = {"1-Electronic Devices and Circuits", "2-Mathematics III", "3-Electrical Machines I", "4-Measurements and Instrumentation", "5-Mathematics III", "6-Electromagnetic Theory", "7-Programming and Data Structures"};
    String[] seeebonetuesday = {"1-Electromagnetic Theory", "2-Electrical Machines I lab/Programming and Data Structures lab", "3-Electrical Machines I lab/Programming and Data Structures lab", "4-Electrical Machines I lab/Programming and Data Structures lab", "5-Electrical Machines I", "6-Measurements and Instrumentation", "7-Electronic Devices and Circuits"};
    String[] seeebonewednesday = {"1-Programming and Data Structures", "2-Electronic Devices and Circuits", "3-Electrical Machines I", "4-Mathematics III", "5-Programming and Data Structures lab/Electronic Devices and Circuits lab", "6-Programming and Data Structures lab/Electronic Devices and Circuits lab", "7-Programming and Data Structures lab/Electronic Devices and Circuits lab"};
    String[] seeebonethursday = {"1-Electrical Machines I", "2-Measurements and Instrumentation", "3-Electromagnetic Theory", "4-Electronic Devices and Circuits", "5-Programming and Data Structures", "6-Mathematics III", "7-Electrical Machines I"};
    String[] seeebonefriday = {"1-Mathematics III", "2-Programming and Data Structures", "3-Measurements and Instrumentation", "4-Electromagnetic Theory", "5-Electronic Devices and Circuits lab/Electrical Machines I lab", "6-Electronic Devices and Circuits lab/Electrical Machines I lab", "7-Electronic Devices and Circuits lab/Electrical Machines I lab"};

    String[] teeebonemonday = {"1-Microprocessors and Microcontrollers", "2-Electrical Machines II", "3-Power Plant Engineering", "4-Power System Analysis ", "5-Control Systems", "6-Power Electronics", "7-Microprocessors and Microcontrollers"};
    String[] teeebonetuesday = {"1-Electrical Machines II", "2-Control and Instrumentation lab/Electrical Machines lab", "3-Control and Instrumentation lab/Electrical Machines lab", "4-Control and Instrumentation lab/Electrical Machines lab", "5-Power Electronics", "6-Electrical Machines II/Control Systems", "7-Power System Analysis "};
    String[] teeebonewednesday = {"1-Power Electronics", "2-Microprocessors and Microcontrollers", "3-Control Systems", "4-Electrical Machines II", "5-Power Plant Engineering", "6-Communication Skills-Laboratory Based", "7-Communication Skills-Laboratory Based"};
    String[] teeebonethursday = {"1-Power System Analysis ", "2-Control Systems", "3-Microprocessors and Microcontrollers", "4-Electrical Machines II", "5-Power Plant Engineering", "6-Communication Skills-Laboratory Based", "7-Communication Skills-Laboratory Based"};
    String[] teeebonefriday = {"1-Control Systems", "2-Power Plant Engineering", "3-Power System Analysis ", "4-Power Electronics", "5-Electrical Machines lab/Control and Instrumentation lab", "6-Electrical Machines lab/Control and Instrumentation lab", "7-Electrical Machines lab/Control and Instrumentation lab"};

    String[] freeebonemonday = {"1-Protection & Switchgear", "2-Fundamentals of Nanoscience", "3-High Voltage Engineering", "4-Fundamentals of Nanoscience", "5-Power System Simulation lab/Comprehension", "6-Power System Simulation lab/Comprehension", "7-Power System Simulation lab/Comprehension"};
    String[] freeebonetuesday = {"1-Special Electrical Machines", "2-Principles of Management", "3-Fundamentals of Nanoscience", "4-Bio-Medical Instrumentation", "5-Protection & Switchgear", "6-LIB KSP", "7-Bio-Medical Instrumentation"};
    String[] freeebonewednesday = {"1-Bio-Medical Instrumentation", "2-Principles of Management", "3-Protection & Switchgear", "4-Special Electrical Machines", "5-High Voltage Engineering", "6-Principles of Management", "7-SEMR XI"};
    String[] freeebonethursday = {"1-Power System Simulation lab/Comprehension", "2-Power System Simulation lab/Comprehension", "3-Power System Simulation lab/Comprehension", "4-Bio-Medical Instrumentation", "5-Protection & Switchgear", "6-High Voltage Engineering", "7-Special Electrical Machines"};
    String[] freeebonefriday = {"1-Principles of Management", "2-Special Electrical Machines", "3-Fundamentals of Nanoscience", "4-High Voltage Engineering", "5-SST KS", "6-SST STM", "7-SST MRK"};

    //it a full
    String[] fitatwomonday = {"1-Techincal English II", "2-DPSD", "3-Mathematics II", "4-Engineering physics II", "5-Engineering chemistry II", "6-PDS I", "7-Technical english II"};
    String[] fitatwotuesday = {"1-Engineering physics II", "2-DPSD", "3-Mathematics II", "4-Engineering chemistry II", "5-Digital lab/PDS lab", "6-Digital lab/PDS lab", "7-Digital lab/PDS lab"};
    String[] fitatwowednesday = {"1-Phy and Chem lab", "2-Phy and Chem lab", "3-Phy and Chem lab", "4-PDS I", "5-Technical english II", "6-Library", "7-Mathematics II"};
    String[] fitatwothursday = {"1-DPSD", "2-Engineering chemistry II", "3-PDS I", "4-Engineering physics II", "5-Digital /PDS I lab", "6-Digital /PDS I lab", "7-Digital /PDS I lab"};
    String[] fitatwofriday = {"1-Engineering chemistry II", "2-Mathematics II", "3-Technical english II", "4-DPSD", "5-Mathematics II", "6-Engineering physics II", "7-PDS I"};

    String[] sitatwomonday = {"1-Design and analysis of algorithm", "2-Operating systems", "3-Software engineering", "4-Microprocessor and microcontroller", "5-Operating system", "6-Software engineering(Tut)", "7-Probability and queuing theory"};
    String[] sitatwotuesday = {"1-Software engineering", "2-Probability and queuing theory", "3-Design and analysis of algorithm", "4-Operating systems", "5-Probability and queuing theory", "6-Operating systems(Tut)", "7-Microprocessor and microcontroller"};
    String[] sitatwowednesday = {"1-Operating systems", "2-Microprocessor and microcontroller", "3-Probability and queuing theory", "4-Design and analysis of algorithm", "5-MC and MP LAB/OS LAB", "6-MC and MP LAB/OS LAB", "7-MC and MP LAB/OS LAB"};
    String[] sitatwothursday = {"1-Microprocessor and microcontroller", "2-OS LAB/SE LAB", "3-OS LAB/SE LAB", "4-OS LAB/SE LAB", "5-Operating system(Tut)", "6-Software engineering", "7-Library"};
    String[] sitatwofriday = {"1-Probability and queuing theory", "2-Design and analysis of algorithm", "3-Microprocessor and microcontroller", "4-Software engineering", "5-SE LAB/MC AND MP LAB", "6-SE LAB/MC AND MP LAB", "7-SE LAB/MC AND MP LAB"};


    String[] titatwomonday = {"1-Distributed system", "2-Mobile app dev lab/Compiler lab", "3-Mobile app dev lab/Compiler lab", "4-Mobile app dev lab/Compiler lab", "5-Total quality management", "6-Artificial intelligence", "7-Software architecture"};
    String[] titatwotuesday = {"1-Compiler design", "2-Artificial intelligence", "3-Software applications", "4-Total quality management", "5-Mobile computing", "6-Distributed systems", "7-Library"};
    String[] titatwowednesday = {"1-Communication and soft skill lab", "2-Communication and soft skill lab", "3-Communication and soft skill lab", "4-Communication and soft skill lab", "5-Compiler design", "6-Mobile computing", "7-Total quality management"};
    String[] titatwothursday = {"1-Mobile computing", "2-Software architecture", "3-Distributed system", "4-Compiler design", "5-Artificial intelligence", "6-Total quality management", "7-Mobile computing"};
    String[] titatwofriday = {"1-Artificial intelligence", "2-Compiler lab/Mobile app dev lab", "3-Compiler lab/Mobile app dev lab", "4-Compiler lab/Mobile app dev lab", "5-Software architecture", "6-Compiler design", "7-Distributed systems"};


    String[] fritatwomonday = {"1-Service oriented architecture", "2-Cyber forensics", "3-Professional ethics in engineering", "4-Cyber forensics(Tut)", "5-Service oriented architecture", "6-Cyber forensics", "7-Software project management"};
    String[] fritatwotuesday = {"1-Professional ethics in engineering", "2-Software project management", "3-Cyber forensics", "4-Service oriented architecture", "5-Cyber forensics", "6-Software project management", "7-professional ethics in engineering(Tut)"};
    String[] fritatwowednesday = {"1-Software project management", "2-Service oriented architecture", "3-Library", "4-Professional ethics in engineering", "5-Software project management", "6-Professional ethics in engineering"};
    String[] fritatwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] fritatwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};

    //odd sem for second ,third and fourth year it a section

    String[] sitaonemonday = {"1-Analog and Digital Communication", "2-Programming and Data Structures II", "3-Operating Systems", "4-Mathematics III", "5-Operating Systems lab/Analog and Digital Communication lab", "6-Operating Systems lab/Analog and Digital Communication lab)", "7-Operating Systems lab/Analog and Digital Communication lab"};
    String[] sitaonetuesday = {"1-Programming and Data Structures II", "2-Mathematics III", "3-Computer Organization and Architecture", "4-Environmental Science and Engineering", "5-Operating Systems", "6-Analog and Digital Communication", "7-Environmental Science and Engineering"};
    String[] sitaonewednesday = {"1-Environmental Science and Engineering", "2-Analog and Digital Communication lab/Programming and Data Structures lab II", "3-Analog and Digital Communication lab/Programming and Data Structures lab II", "4-Analog and Digital Communication lab/Programming and Data Structures lab II", "5-Analog and Digital Communication", "6-Programming and Data Structures II", "7-Mathematics III"};
    String[] sitaonethursday = {"1-Computer Organization and Architecture", "2-Analog and Digital Communication", "3-Mathematics III", "4-Operating Systems", "5-Library", "6-Environmental Science and Engineering", "7-Computer Organization and Architecture"};
    String[] sitaonefriday = {"1-Mathematics III", "2-Computer Organization and Architecture", "3-Operating Systems", "4-Programming and Data Structures II", "5-Programming and Data Structures lab II/Operating Systems lab", "6-Programming and Data Structures lab II/Operating Systems lab", "7-Programming and Data Structures lab II/Operating Systems lab"};


    String[] titaonemonday = {"1-Computer Networks", "2-Wireless Communication", "3-Web Programming", "4-Digital Signal Processing", "5-Web Programming lab/Case Tools lab", "6-Web Programming lab/Case Tools lab", "7-Web Programming lab/Case Tools lab"};
    String[] titaonetuesday = {"1-Web Programming", "2-Object Oriented Analysis and Design", "3-Digital Signal Processing", "4-Computer Networks", "5-Object Oriented Analysis and Design", "6-Graphics and Multimedia", "7-Web Programming(Tutorial)/Library"};
    String[] titaonewednesday = {"1-Graphics and Multimedia", "2-Networks lab", "3-Networks lab", "4-Networks lab", "5-Digital Signal Processing", "6-Computer Networks", "7-Wireless Communication"};
    String[] titaonethursday = {"1-Wireless Communication", "2-Case Tools lab/Web Programming lab", "3-Case Tools lab/Web Programming lab", "4-Case Tools lab/Web Programming lab", "5-Graphics and Multimedia", "6-Web Programming", "7-Object Oriented Analysis and Design"};
    String[] titaonefriday = {"1-Digital Signal Processing", "2-Graphics and Multimedia", "3-Object Oriented Analysis and Design", "4-Web Programming", "5-Computer Networks", "6-Wireless Communication", "7-Digital Signal Processing(Tutorial)"};


    String[] fritaonemonday = {"1-Data Mining lab", "2-Data Mining lab", "3-Data Mining lab", "4-Information Management", "5-Software Testing/Data Analysis", "6-Cryptography and Network Security", "7-Grid and Cloud Computing"};
    String[] fritaonetuesday = {"1-Cryptography and Network Security", "2-Grid and Cloud Computing", "3-Information Management", "4-Data Ware Housing and Data Mining", "5-Security lab/Grid and Cloud Computing lab", "6-Security lab/Grid and Cloud Computing lab", "7-Security lab/Grid and Cloud Computing lab"};
    String[] fritaonewednesday = {"1-Grid and Cloud Computing lab/Security lab", "2-Grid and Cloud Computing lab/Security lab", "3-Grid and Cloud Computing lab/Security lab", "4-Software Testing/Data Analysis", "5-Data Ware Housing and Data Mining", "6-Grid and Cloud Computing", "7-Cryptography and Network Security"};
    String[] fritaonethursday = {"1-Data Ware Housing and Data Mining", "2-Information Management", "3-Software Testing/Data Analysis", "4-Cryptography and Network Security", "5-Library", "6-Data Ware Housing and Data Mining", "7-Information Management"};
    String[] fritaonefriday = {"1-Grid and Cloud Computing", "2-Software Testing/Data Analysis", "3-Cryptography and Network Security", "4-Grid and Cloud Computing", "5-Data Ware Housing and Data Mining", "6-Information Management", "7-Software Testing/Data Analysis"};


    //it b full
    String[] fitbtwomonday = {"1-Technical english II", "2-Engineering chemistry II", "3-Technical english II", "4-Engineering physics II", "5-Mathematics II", "6-Engineering chemistry II", "7-Library"};
    String[] fitbtwotuesday = {"1-Mathematics II", "2-DPSD", "3-Mathematics II", "4-PDS I", "5-Phy and Chem lab", "6-Phy and Chem lab", "7-Phy and Chem lab"};
    String[] fitbtwowednesday = {"1-DPSD", "2-Engineering physics II", "3-PDS I", "4-Engineering chemistry II", "5-Digital lab/PDS I lab", "6-Digital lab/PDS I lab", "7-Digital lab/PDS I lab"};
    String[] fitbtwothursday = {"1-Engineering physics II", "2-PDS I", "3-DPSD", "4-Engineering chemistry II", "5-Technical english II", "6-Mathematics II", "7-Technical english II"};
    String[] fitbtwofriday = {"1-Digital lab/PDS I lab", "2-Digital lab/PDS I lab", "3-Digital lab/PDS I lab", "4-Engineering physics II", "5-PDS I", "6-DPSD", "7-Mathematics II"};

    String[] sitbtwomonday = {"1-Probability and queuing theory", "2-Software engineering", "3-Operating systems", "4-design and analysis of algorithm", "5-MC AND MP LAB/OS LAB", "6-MC AND MP LAB/OS LAB", "7-MC AND MP LAB/OS LAB"};
    String[] sitbtwotuesday = {"1-microprocessor and microcontroller", "2-OS LAB/SE LAB", "3-OS LAB/SE LAB", "4-OS LAB/SE LAB", "5-Microprocesser and microcontroller(Tut)", "6-Probability and queuing theory", "7-Software engineering"};
    String[] sitbtwowednesday = {"1-Design and analysis of algorithm", "2-Probability and queuing theory", "3-Software engineering", "4-Operating system", "5-Probability and queuing theory", "6-Microprocessor and microcontroller","7-Design and analysis of algorithm"};
    String[] sitbtwothursday = {"1-Software engineering", "2-Operating system", "3-Microprocessor and microcontroller", "4-Design and analysis of algorithm", "5-SE LAB/MP AND MC LAB", "6-SE LAB/MP AND MC LAB", "7-SE LAB/MP AND MC LAB"};
    String[] sitbtwofriday = {"1-Operating System", "2-Microprocessor and microcontroller", "3-Design and analysis of algorithm", "4-Probability and queuing theory", "5-Software engineering", "6-Operating systems", "7-Library"};


    String[] titbtwomonday = {"1-distributed system", "2-Compiler design", "3-Total quality management", "4-Software architecture", "5-Mobile computing", "6-Artificial intelligence", "7-Total quality management"};
    String[] titbtwotuesday = {"1-Artificial intelligence", "2-Mobile computing", "3-Compiler design", "4-Toal quality management", "5-Mobile App dev lab/Compiler lab", "6-Mobile App dev lab/Compiler lab", "7-Mobile App dev lab/Compiler lab"};
    String[] titbtwowednesday = {"1-Mobile computing", "2-Compiler lab/Mobile app dev lab", "3-Compiler lab/Mobile app dev lab", "4-Compiler lab/Mobile app dev lab", "5-Software architecture", "6-Compiler design", "7-Distributed systems"};
    String[] titbtwothursday = {"1-Communication and soft skill lab", "2-Communication and soft skill lab", "3-Communication and soft skill lab", "4-Communication and soft skill lab", "5-Artificial intelligence", "6-Distributes systems", "7-Software architecture"};
    String[] titbtwofriday = {"1-Compiler design", "2-Distributed systems", "3-Software architecture", "4-Artificial intelligence", "5-Total quality management", "6-Mobile computing", "7-Library"};


    String[] fritbtwomonday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] fritbtwotuesday = {"1-Project work\",\"2-Project work\",\"3-Project work\",\"4-Project work\",\"5-Project work\",\"6-Project work\",\"7-Project work"};
    String[] fritbtwowednesday = {"1-Cyber Forensics", "2-Service oriented architecture ", "3-Professional ethics in engineering", "4-Cyber forensics ", "5-Service oriented architecture", "6-Professional ethics in engineering", "7-Software project management "};
    String[] fritbtwothursday = {"1-Service oriented architecture", "2-Software project management", "3-Cyber forensics(Tut)", "4-Software project management(Tut)", "5-Professional ethics in engineering", "6-Service oriented architecture", "7-Professional ethics in engineering"};
    String[] fritbtwofriday = {"1-Software project management", "2-Cyber forensics", "3-Library", "4-Professional ethics in engineering", "5-Software project management", "6-Software oriented architecture", "7-Cyber forensics"};

    //odd sem for second,third and fourth year for it b section

    String[] sitbonemonday = {"1-Analog and Digital Communication", "2-Operating Systems", "3-Mathematics III", "4-Programming and Data Structures II", "5-Environmental Science and Engineering", "6-Computer Organization and Architecture", "7-Library"};
    String[] sitbonetuesday = {"1-Mathematics III", "2-Operating Systems lab/Analog and Digital Communication lab", "3-Operating Systems lab/Analog and Digital Communication lab", "4-Operating Systems lab/Analog and Digital Communication lab", "5-Programming and Data Structures II", "6-Analog and Digital Communication", "7-Environmental Science and Engineering"};
    String[] sitbonewednesday = {"1-Computer Organization and Architecture", "2-Programming and Data Structures II", "3-Operating Systems", "4-Mathematics III", "5-Programming and Data Structures lab II/Operating Systems lab", "6-Programming and Data Structures lab II/Operating Systems lab", "7-Programming and Data Structures lab II/Operating Systems lab"};
    String[] sitbonethursday = {"1-Operating Systems", "2-Mathematics III", "3-Environmental Science and Engineering", "4-Computer Organization and Architecture", "5-Analog and Digital Communication lab/Programming and Data Structures lab II", "6-Analog and Digital Communication lab/Programming and Data Structures lab II", "7-Analog and Digital Communication lab/Programming and Data Structures lab II"};
    String[] sitbonefriday = {"1-Programming and Data Structures II", "2-Analog and Digital Communication", "3-Computer Organization and Architecture", "4-Environmental Science and Engineering", "5-Analog and Digital Communication", "6-Operating Systems", "7-Mathematics III"};


    String[] titbonemonday = {"1-Graphics and Multimedia", "2-Computer Networks", "3-Object Oriented Analysis and Design", "4-Wireless Communication", "5-Networks lab", "6-Networks lab", "7-Networks lab"};
    String[] titbonetuesday = {"1-Digital Signal Processing", "2-Web Programming lab/Case Tools lab", "3-Web Programming lab/Case Tools lab", "4-Web Programming lab/Case Tools lab", "5-Computer Networks", "6-Web Programming", "7-Graphics and Multimedia"};
    String[] titbonewednesday = {"1-Web Programming", "2-Digital Signal Processing", "3-Wireless Communication", "4-Graphics and Multimedia", "5-Object Oriented Analysis and Design", "6-Computer Networks", "7-Web Programming(Tutorial)/Library"};
    String[] titbonethursday = {"1-Computer Networks", "2-Web Programming", "3-Digital Signal Processing", "4-Object Oriented Analysis and Design", "5-Wireless Communication", "6-Graphics and Multimedia", "7-Digital Signal Processing(Tutorial)"};
    String[] titbonefriday = {"1-Wireless Communication", "2-Case Tools lab/Web Programming lab", "3-Case Tools lab/Web Programming lab", "4-Case Tools lab/Web Programming lab", "5-Web Programming", "6-Digital Signal Processing", "7-Object Oriented Analysis and Design"};


    String[] fritbonemonday = {"1-Security lab/Grid and Cloud Computing lab", "2-Security lab/Grid and Cloud Computing lab", "3-Security lab/Grid and Cloud Computing lab", "4-Cryptography and Network Security", "5-Software Testing/Data Analytics", "6-Data Ware Housing and Data Mining", "7-Grid and Cloud Computing"};
    String[] fritbonetuesday = {"1-Cryptography and Network Security","2-Grid and Cloud Computing","3-Data Ware Housing and Data Mining","4-Information Management","5-Data Mining lab","6-Data Mining lab","7-Data Mining lab"};
    String[] fritbonewednesday = {"1-Data Ware Housing and Data Mining", "2-Information Management ", "3-Grid and Cloud Computing", "4-Software Testing/Data Analytics ", "5-Library", "6-Information Management", "7-Cryptography and Network Security "};
    String[] fritbonethursday = {"1-Information Management", "2-Cryptography and Network Security", "3-Software Testing/Data Analytics", "4-Data Ware Housing and Data Mining", "5-Grid and Cloud Computing lab/Security lab", "6-Grid and Cloud Computing lab/Security lab", "7-Grid and Cloud Computing lab/Security lab"};
    String[] fritbonefriday = {"1-Grid and Cloud Computing", "2-Software Testing/Data Analytics", "3-Data Ware Housing and Data Mining", "4-Cryptography and Network Security", "5-Information Management", "6-Grid and Cloud Computing", "7-Software Testing/Data Analytics"};

    //even sem mech a full
    String[] fmechatwomonday = {"1-BEEE", "2-Engineering mechanics", "3-Engineering chemistry II", "4-Mathematics II", "5-CAD/CAM Lab", "6-CAD/CAM Lab", "7-CAD/CAM Lab"};
    String[] fmechatwotuesday = {"1-Mathematics II", "2-Enginering physics II", "3-Engineering chemistry II", "4-Technical english II", "5-BEEE", "6-Engineering mechanics", "7-Engineering mechanics/Mathematics (Tut)"};
    String[] fmechatwowednesday = {"1-Engineering mechanics", "2-BEEE", "3-Engineering physics II", "4-Engineering physics II", "5-Phy and chem lab", "6-Phy and chem lab", "'7-Phy and chem lab"};
    String[] fmechatwothursday = {"1-Technical english II", "2-BEEE", "3-Mathematics II", "4-Engineering physics II", "5-Library", "6-Engineering mechanics", "7-Mathematics II"};
    String[] fmechatwofriday = {"1-Engineering chemistry II", "2-Mathematics II", "3-BEEE", "4-Technical english II", "5-Engineering physics II", "6-Engineering mechanics", "7-Technical english II"};

    String[] smechatwomonday = {"engineering materials and metallurgy", "2-Thermal engineering", "3-Statistics and numerical methods", "4-Manufacturing technology II", "5-Thermal engineering lab/Strength of materials lab", "6-Thermal engineering lab/Strength of materials lab", "7-Thermal engineering lab/Strength of materials lab"};
    String[] smechatwotuesday = {"1-Statistics and numerical methods", "2-Kinematics of machinery", "3-Environmental science and engineering", "4-thermal engineering(Tut)", "5-Manufacturig technology lab II/Thermal engineering lab I","6-Manufacturig technology lab II/Thermal engineering lab I", "7-Manufacturig technology lab II/Thermal engineering lab I"};
    String[] smechatwowednesday = {"1-Thermal engineering", "2-Manufacturing technology lab I/SOM Lab", "3-Manufacturing technology lab I/SOM Lab", "4-Manufacturing technology lab I/SOM Lab", "5-Kinematics of machinery", "6-Manufacturing technology", "7-Statistics and numerical methods (Tut)"};
    String[] smechatwothursday = {"1-Environmental science and engineering", "2-Engneering materials and metallurgy", "3-Manufacturing technology", "4-Statistics and numerical methods", "5-Kinematics of machinery(Tut)", "6-Engineering materials and metallurgy", "7-Environmental science and engineering"};
    String[] smechatwofriday = {"1-kinematics of machinery", "2-Thermal engineering", "3-Environmental science and engineering", "4-Engineering materials and metallurgy", "5-Statistics and numerical methods", "6-Manufacturing technology II", "7-Seminar/Library"};


    String[] tmechatwomonday = {"1-Finite element analysis", "2-Design of transmission system", "3-gas dynamics and jet propulsion", "4-Automobile engineering", "5-Finite element analysis(E)/Gas dynamics and jet propagation(E)/Marketing management(E)", "6-Principles of management", "7-Automobile engineering"};
    String[] tmechatwotuesday = {"1-Gas dynamics and jet propagation", "2-Principles of management", "3-Design of transmission system", "4-Finite element analysis", "5-CAD/CAM Lab", "6-CAD/CAM Lab", "7-CAD/CAM Lab"};
    String[] tmechatwowednesday = {"1-Finite element analysis(E)/Gas dynamics and jet propagation(E)/Marketing management(E)", "2-Automobile engineering", "3-Finite element analysis(Tut)", "4-Finite element analysis", "5-Finite element analysis(E)/Gas dynamics and jet propagation(E)/Marketing management(E)", "6-Gas dynamics and jet propulsion", "7-Design and fabrication project"};
    String[] tmechatwothursday = {"1-Communication skills lab", "2-Communication skills lab", "3-Communication skills lab", "4-Communication skills lab", "5-Designs of transmission systems", "6-Automobile engineering", "7-Principles of management"};
    String[] tmechatwofriday = {"1-Design of transmission systems(Tut)", "2-Gas dynamics and jet propagation", "3-Finite element analysis(E)/Gas dynamics and jet propagation(E)/Marketing management(E)", "4-Principles of management", "5-design and fabrication project", "6-Design and fabrication project", "7-Design and fabrication project"};


    String[] frmechatwomonday = {"Engineering economics", "2-Advanced IC Engines/Additive manufacturing", "3-engineering economics", "4-Entrepreneurship development/Operation research", "5-Advanced IC Engine/Additive manufacturing", "6-Entreprenuership development/Operations research", "7-Project work"};
    String[] frmechatwotuesday = {"1-Entreprenuership development/Operation research", "2-Advanced IC Engines/Additive manufacturing", "3--Entrepreneurship development/Operation research", "4-Engineering economics", "5-Advanced IC Engines/Additive manufacturing", "6-Engineering economics", "7-Project work"};
    String[] frmechatwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechatwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechatwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};

    //odd sem for second.third and fourth year mech a section

    String[] smechaonemonday = {"1-Mathematics III", "2-Manufacturing Technology I", "3-Mathematics III", "4-Engineering Thermodynamics", "5-Electrical Drives and Controls", "6-Manufacturing Technology I", "7-Engineering Materials and Metallurgy"};
    String[] smechaonetuesday = {"1-Manufacturing Technology I", "2-Engineering Thermodynamics", "3-Engineering Materials and Metallurgy", "4-Mechanics of Solids", "5-Electrical Engineering lab/Manufacturing Technology lab I", "6-Electrical Engineering lab/Manufacturing Technology lab I", "7-Electrical Engineering lab/Manufacturing Technology lab I"};
    String[] smechaonewednesday = {"1-Engineering Thermodynamics", "2-Strength of Materials lab/Electrical Engineering lab", "3-Strength of Materials lab/Electrical Engineering lab", "4-Strength of Materials lab/Electrical Engineering lab", "5-Mathematics III", "6-Mechanics of Solids", "7-Mechanics of Solids(Tutorial)"};
    String[] smechaonethursday = {"1-Electrical Drives and Controls", "2-Engineering Materials and Metallurgy", "3-Mechanics of Solids", "4-Engineering Materials and Metallurgy/Electrical Drives and Controls", "5-Manufacturing Technology I", "6-Engineering Thermodynamics(Tutorial)", "7-Mathematics III"};
    String[] smechaonefriday = {"1-Mechanics of Solids", "2-Engineering Thermodynamics", "3-Mathematics III", "4-Electrical Drives and Controls", "5-Manufacturing Technology lab I/Strength of Materials lab", "6-Manufacturing Technology lab I/Strength of Materials lab", "7-Manufacturing Technology lab I/Strength of Materials lab"};


    String[] tmechaonemonday = {"1-Heat and Mass Transfer", "2-Dynamics of Machines", "3-Professional Ethics in Engineering", "4-Design of Machine Elements", "5-Dynamics lab/Thermal Engineering lab II", "6-Dynamics lab/Thermal Engineering lab II", "7-Dynamics lab/Thermal Engineering lab II"};
    String[] tmechaonetuesday = {"1-Computer Aided Design", "2-Heat and Mass Transfer(Tutorial)", "3-Metrology and Measurements", "4-Computer Aided Design", "5-Design of Machine Elements", "6-Professional Ethics in Engineering", "7-Seminar"};
    String[] tmechaonewednesday = {"1-Metrology and Measurements", "2-Thermal Engineering lab II/Metrology and Measurements lab", "3-Thermal Engineering lab II/Metrology and Measurements lab", "4-Thermal Engineering lab II/Metrology and Measurements lab", "5-Design of Machine Elements", "6-Heat and Mass Transfer", "7-Dynamics of Machines(Tutorial)"};
    String[] tmechaonethursday = {"1-Professional Ethics in Engineering", "2-Design of Machine Elements(Tutorial)", "3-Dynamics of Machines", "4-Metrology and Measurements", "5-Professional Ethics in Engineering", "6-Library", "7-Metrology and Measurements"};
    String[] tmechaonefriday = {"1-Dynamics of Machines", "2-Computer Aided Design", "3-Heat and Mass Transfer", "4-Computer Aided Design", "5-Dynamics lab/Metrology and Measurements lab", "6-Dynamics lab/Metrology and Measurements lab", "7-Dynamics lab/Metrology and Measurements lab"};


    String[] frmechaonemonday = {"1-Simulation and Analysis lab/Mechatronics lab", "2-Simulation and Analysis lab/Mechatronics lab", "3-Simulation and Analysis lab/Mechatronics lab", "4-Computer Integrated Manufacturing Systems", "5-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "6-Robotics/Maintenance Engineering", "7-Mechatronics"};
    String[] frmechaonetuesday = {"1-Computer Integrated Manufacturing Systems", "2-Total Quality Management", "3-Mechatronics", "4-Power Plant Engineering", "5-Robotics/Maintenance Engineering", "6-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "7-Comprehension"};
    String[] frmechaonewednesday = {"1-Total Quality Management", "2-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "3-Robotics/Maintenance Engineering", "4-Mechatronics", "5-Simulation and Analysis lab/Mechatronics lab", "6-Simulation and Analysis lab/Mechatronics lab", "7-Simulation and Analysis lab/Mechatronics lab"};
    String[] frmechaonethursday = {"1-Mechatronics", "2-Power Plant Engineering", "3-Total Quality Management", "4-Computer Integrated Manufacturing Systems", "5-Power Plant Engineering", "6-Library", "7-Comprehension"};
    String[] frmechaonefriday = {"1-Total Quality Management", "2-Robotics/Maintenance Engineering", "3-Computer Integrated Manufacturing Systems", "4-Library", "5-Power Plant Engineering", "6-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "7-Seminar"};//even sem mech b full

    //even sem for second,third and fourth year mech b section

    String[] fmechbtwomonday = {"1-Engineering Chemistry II", "2-Technical english II", "3-Mathematics II", "4-Engineering physics II", "5-BEEE", "6-Mathematics II", "7-Library"};
    String[] fmechbtwotuesday = {"1-Mathematics II", "2-BEEE", "3-Technical english II", "4-Engineering physics II", "5-Engineering mechanics", "6-Engineeing mechanics/Mathematics (Tut)", "7-BEEE"};
    String[] fmechbtwowednesday = {"1-BEEE", "2-Engineering Physics II", "3-Engineering mechanics", "4-Mathematics II", "5-CAD/CAM Lab", "6-CAD/CAM Lab", "7-CAD/CAM Lab"};
    String[] fmechbtwothursday = {"1-Engineering physics II", "2-Engineering chemistry II", "3-Engineering mechanics", "4-Engineering chemistry II", "5-Phy and Chem lab II", "6-Phy and Chem lab II", "7-Phy and Chem lab II"};
    String[] fmechbtwofriday = {"1-BEEE", "2-Mathematics II", "3-Technical english II", "4-Engineering mechanics", "5-Engineering chemistry II", "6-Technical english II", "7-Engineering mechanics"};


    String[] smechbtwomonday = {"1-Statistics and numerical methods", "2-Manufacturing technology II", "3-thermal engineering", "4-Environmental science and engineering", "5-Kinematics of machinery(Tut)", "6-Engineering materials and metallurgy", "7-Seminar/Library"};
    String[] smechbtwotuesday = {"1-Thermal engineering", "2-Statistics and numerical methods", "3-Environmental science and engineering", "4-Engineering materials and metallurgy", "5-Manufacturing technology II", "6-Kinematics of machinery", "7-Statistics and numerical methods "};
    String[] smechbtwowednesday = {"1-Manufacturing technology II", "2-Environmental science and engineering", "3-Thermal engineering", "4-Statistics and numerical methods", "5-Manufacturing technology II lab/thermal engineering lab", "6-Manufacturing technology II lab/thermal engineering lab", "7-Manufacturing technology II lab/thermal engineering lab"};
    String[] smechbtwothursday = {"1-Kinwmatics of machinery", "2-Manufacturing technology lab I/SOM Lab", "3-Manufacturing technology lab I/SOM Lab", "4-Manufacturing technology lab I/SOM Lab", "5-Engineering materials and metallurgy", "6-Manufacturing technology II", "7-Environmental science and engineering"};
    String[] smechbtwofriday = {"1-Engineering materials and metallurgy", "2-Thermal engineering", "3-Kinematics of machinery", "4-Statistics and numerical methods", "5-Thermal engineering lab I/SOM lab", "6-Thermal engineering lab I/SOM lab", "7-Thermal engineering lab I/SOM lab"};


    String[] tmechbtwomonday = {"1-Design of transmissions system", "2-Gas dynamics and jet propulsion", "3-Principles of management", "4-Automaobile engineering", "5-Renewable resources of energy(E)/Unconventional marketing process(E)/Marketing management(E)", "6-Communication skills lab", "7-Communication skills lab"};
    String[] tmechbtwotuesday = {"1-Gas dynamics and jet propulsion", "2-Principles of management", "3-Finite element analysis", "4-Automobile engineering", "5-Design of transmission systems(Tut)", "6-Communication skills lab", "7-Communication skills lab"};
    String[] tmechbtwowednesday = {"1-Renewable resources of energy(E)/Unconventional marketing process(E)/Marketing management(E)", "2-Gas dynamics and jet propulsion", "3-Automobile engineering", "4-Finnite element analysis", "5-Renewable resources of energy(E)/Unconventional marketing process(E)/Marketing management(E)", "6-Design of transmission system", "7-Design and fabrication project"};
    String[] tmechbtwothursday = {"1-Finite element analysis", "2-Gas dynamics and jet propulsion(Tut)", "3-Principles of management", "4-Design of transmission systems", "5-Design and fabrication project", "6-Design and fabrication project", "7-Design and fabrication project"};
    String[] tmechbtwofriday = {"1-Principles of management", "2-Automobile engineering", "3-Renewable resources of energy(E)/Unconventional marketing process(E)/Marketing management(E)", "4-Finte element analysis(Tut)", "5-CAD/CAM LAB", "6-CAD/CAM LAB", "7-CAD/CAM LAB"};


    String[] frmechbtwomonday = {"1-Engineering economics", "2-Advanced IC Engines(E)/Additive manufacturing(E)", "3-Engineering economics", "4-Entrepreneurship development(E)/Operations research(E)", "5-Advanced IC Engines(E)/Additive manufacturing(E)", "6-Entrepreneurship development(E)/Operations research(E)", "7-Project work"};
    String[] frmechbtwotuesday = {"1-Entrepreneurship development(E)/Operations research(E)", "2-Advanced IC Engines(E)/Additive manufacturing(E)", "3-Entrepreneurship development(E)/Operations research(E)", "4-Engineering economics", "5-Advanced IC Engines(E)/Additive manufacturing(E)", "6-Engineering economics", "7-Project work"};
    String[] frmechbtwowednesday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechbtwothursday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};
    String[] frmechbtwofriday = {"1-Project work", "2-Project work", "3-Project work", "4-Project work", "5-Project work", "6-Project work", "7-Project work"};


    // odd sem for second,third and fourth year mech b section

    String[] smechbonemonday = {"1-Engineering Thermodynamics", "2-Mathematics III", "3-Engineering Materials and Metallurgy", "4-Mechanics of Solids", "5-Strength of Materials lab/Electrical Engineering lab", "6-Strength of Materials lab/Electrical Engineering lab", "7-Strength of Materials lab/Electrical Engineering lab"};
    String[] smechbonetuesday = {"1-Manufacturing Technology I", "2-Engineering Materials and Metallurgy", "3-Engineering Thermodynamics", "4-Manufacturing Technology I", "5-Electrical Drives and Controls", "6-Mechanics of Solids", "7-Mechanics of Solids(Tutorial)"};
    String[] smechbonewednesday = {"1-Electrical Drives and Controls", "2-Mechanics of Solids", "3-Engineering Thermodynamics", "4-Mathematics III", "5-Electrical Drives and Controls/Engineering Materials and Metallurgy", "6-Manufacturing Technology I", "7-Engineering Materials and Metallurgy"};
    String[] smechbonethursday = {"1-Mathematics III", "2-Manufacturing Technology lab I/Electrical Engineering lab", "3-Manufacturing Technology lab I/Electrical Engineering lab", "4-Manufacturing Technology lab I/Electrical Engineering lab", "5-Mathematics III", "6-Manufacturing Technology I", "7-Engineering Thermodynamics"};
    String[] smechbonefriday = {"1-Mechanics of Solids", "2-Manufacturing Technology lab I/Strength of Materials lab", "3-Manufacturing Technology lab I/Strength of Materials lab", "4-Manufacturing Technology lab I/Strength of Materials lab", "5-Engineering Thermodynamics", "6-Electrical Drives and Controls", "7-Mathematics III(Tutorial)"};


    String[] tmechbonemonday = {"1-Heat and Mass Transfer", "2-Computer Aided Design", "3-Professional Ethics in Engineering", "4-Dynamics of Machines", "5-Design of Machine Elements", "6-Metrology and Measurements", "7-Seminar"};
    String[] tmechbonetuesday = {"1-Dynamics of Machines", "2-Design of Machine Elements", "3-Professional Ethics in Engineering", "4-Metrology and Measurements", "5-Dynamics lab/Thermal Engineering lab II", "6-Dynamics lab/Thermal Engineering lab II", "7-Dynamics lab/Thermal Engineering lab II"};
    String[] tmechbonewednesday = {"1-Metrology and Measurements", "2-Heat and Mass Transfer", "3-Dynamics of Machines(Tutorial)", "4-Computer Aided Design", "5-Thermal Engineering lab II/Metrology and Measurements lab", "6-Thermal Engineering lab II/Metrology and Measurements lab", "7-Thermal Engineering lab II/Metrology and Measurements lab"};
    String[] tmechbonethursday = {"1-Computer Aided Design", "2-Professional Ethics in Engineering", "3-Design of Machine Elements", "4-Dynamics of Machines", "5-Metrology and Measurements", "6-Heat and Mass Transfer", "7-Professional Ethics in Engineering"};
    String[] tmechbonefriday = {"1-Heat and Mass Transfer(Tutorial)", "2-Dynamics lab/Metrology and Measurements lab", "3-Dynamics lab/Metrology and Measurements lab", "4-Dynamics lab/Metrology and Measurements lab", "5-Design of Machine Elements", "6-Library", "7-Computer Aided Design"};


    String[] frmechbonemonday = {"1-Power Plant Engineering", "2-Mechatronics", "3-Computer Integrated Manufacturing Systems", "4-Library", "5-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "6-Robotics/Maintenance Engineering", "7-Computer Integrated Manufacturing Systems"};
    String[] frmechbonetuesday = {"1-Simulation and Analysis lab/Mechatronics lab", "2-Simulation and Analysis lab/Mechatronics lab", "3-Simulation and Analysis lab/Mechatronics lab", "4-Total Quality Management", "5-Robotics/Maintenance Engineering", "6-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "7-Seminar"};
    String[] frmechbonewednesday = {"1-Computer Integrated Manufacturing Systems", "2-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "3-Robotics/Maintenance Engineering", "4-Mechatronics", "5-Power Plant Engineering", "6-Library", "7-Comprehension"};
    String[] frmechbonethursday = {"1-Mechatronics", "2-Power Plant Engineering", "3-Total Quality Management", "4-Computer Integrated Manufacturing Systems", "5-Simulation and Analysis lab/Mechatronics lab", "6-Simulation and Analysis lab/Mechatronics lab", "7-Simulation and Analysis lab/Mechatronics lab"};
    String[] frmechbonefriday = {"1-Power Plant Engineering", "2-Robotics/Maintenance Engineering", "3-Comprehension", "4-Total Quality Management", "5-Mechatronics", "6-Process Planning and Cost Estimation/Welding Technology/Energy Conservation and Management", "7-Total Quality Management"};

    Integer r, x, y, z, t, d;

    @SuppressLint("NewApi")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.ttperiod);
        Bundle extras = getIntent().getExtras();
        x = extras.getInt("year");
        y = extras.getInt("sem");
        z = extras.getInt("sel");

        t = extras.getInt("sec");
        d = extras.getInt("day");
        listView = (ListView) findViewById(R.id.period);


        listView.setAdapter(new ArrayAdapter<String>(ttperiod.this, android.R.layout.simple_list_item_1, new ArrayList<String>()));

        switch (z) // getting the valuefor depatrmnt
        {
            case 1:// automobile
            {
                switch (t) { //section
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem auto
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all sem automobile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 2:
                                            new Asyncfautotwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsautotwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctautotwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrautotwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem auto -odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all sem automobile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all sem automobile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all sem automobile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 1:
                                            new Asyncfautoonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctautoonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrautoonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                } //end of switch t
                break;
            }
            case 2: // biotech
            {
                switch (t) { //section
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem biotech
                                    switch (y) {
                                        case 2:
                                            new Asyncfbiotechtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsbiotechtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctbiotechtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrbiotechtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all biotech-odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem bioetch
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem biotech
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem biotech
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsbiotechonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all sem autombile
                                    switch (y) {
                                        case 1:
                                            new Asyncfbiotechonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsautoonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctbiotechonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrbiotechonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    } //end of case 1 i.e a section's case part
                } //end of switch t
                break;
            }

            case 3: // chemical
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem chemical
                                    switch (y) {
                                        case 2:
                                            new Asyncfchematwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncschematwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctchematwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchematwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all sem chem -odd sem
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem chemical
                                    switch (y) {
                                        case 1:
                                            new Asyncfchemaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncschemaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctchemaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchemaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem chemical b
                                    switch (y) {
                                        case 2:
                                            new Asyncfchembtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncschembtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctchembtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrchembtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem chemicAl b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem chemical b
                                    switch (y) {
                                        case 1:
                                            new Asyncfchembonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncschembonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctchembonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrchembonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                } //end of switch t
                break;
            }
            case 4: // civil
            {

                switch (t) {
                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem civil
                                    switch (y) {
                                        case 2:
                                            new Asyncfciviltwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsciviltwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctciviltwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrciviltwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem civil
                                    switch (y) {
                                        case 1:
                                            new Asyncfcivilonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscivilonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcivilonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcivilonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                }
                break;
            }
            case 5: //eee
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem eee a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeeatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeeatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeeatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeeatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem eee a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeeaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeeaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeeaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeeaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem eee b
                                    switch (y) {
                                        case 2:
                                            new Asyncfeeebtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncseeebtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asyncteeebtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreeebtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonemonday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem eee b
                                    switch (y) {
                                        case 1:
                                            new Asyncfeeebonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncseeebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteeebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreeebonethursday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;

            }
            case 6: // it
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem it a
                                    switch (y) {
                                        case 2:
                                            new Asyncfitatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctitatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem it a
                                    switch (y) {
                                        case 1:
                                            new Asyncfitaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctitaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {  //it b
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem it  b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem it b
                                    switch (y) {
                                        case 2:
                                            new Asyncfitbtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsitbtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctitbtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfritbtwofriday().execute();
                                            break;
                                    }
                                    break;
                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem it b
                                    switch (y) {
                                        case 1:
                                            new Asyncfitbonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsitbonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctitbonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfritbonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;
            }
            case 7://ece
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem ece a
                                    switch (y) {
                                        case 2:
                                            new Asyncfeceatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncseceatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asyncteceatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfreceatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem ece a
                                    switch (y) {
                                        case 1:
                                            new Asyncfeceaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncseceaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asyncteceaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfreceaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem ece b
                                    switch (y) {
                                        case 2:
                                            new Asyncfecebtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecebtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctecebtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecebtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem ece b
                                    switch (y) {
                                        case 1:
                                            new Asyncfecebonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsecebonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctecebonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrecebonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                    case 3: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem ece c
                                    switch (y) {
                                        case 2:
                                            new Asyncfecectwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsecectwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctecectwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrecectwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem ece c
                                    switch (y) {
                                        case 1:
                                            new Asyncfececonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsececonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctececonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrececonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;
            }
            case 8: // cse
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem cse a
                                    switch (y) {
                                        case 2:
                                            new Asyncfcseatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncscseatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctcseatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcseatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem cse a
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem cse b
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsebtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsebtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsebtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsebtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem  cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem cse b
                                    switch (y) {
                                        case 1:
                                            new Asyncfcsebonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscsebonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcsebonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcsebonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }
                    case 3: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem cse c
                                    switch (y) {
                                        case 2:
                                            new Asyncfcsectwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncscsectwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctcsectwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrcsectwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem cse c
                                    switch (y) {
                                        case 1:
                                            new Asyncfcseconefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncscseconefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctcseconefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrcseconefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;

            }
            case 9:  // mech
            {
                switch (t)       // selecting the respective section
                {

                    case 1: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem mech a
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechatwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechatwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechatwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechatwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem mech a
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechaonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechaonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechaonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechaonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                    case 2: {
                        if (y % 2 == 0) // calling the even semester
                        {
                            // Toast.makeText(ttperiod.this,"Timetable Not yet given",Toast.LENGTH_LONG).show();
                            switch (d) //day switcher
                            {
                                case 0: // monday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwomonday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwomonday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwomonday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwomonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwotuesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwotuesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwotuesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwotuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwowednesday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwowednesday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwowednesday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwowednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwothursday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwothursday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwothursday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwothursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all even sem mech b
                                    switch (y) {
                                        case 2:
                                            new Asyncfmechbtwofriday().execute();
                                            break;
                                        case 4:
                                            new Asyncsmechbtwofriday().execute();
                                            break;
                                        case 6:
                                            new Asynctmechbtwofriday().execute();
                                            break;
                                        case 8:
                                            new Asyncfrmechbtwofriday().execute();
                                            break;
                                    }
                                    break;

                            }

                        } else {
                            switch (d) //day switcher
                            {
                                case 0: // monday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonemonday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonemonday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonemonday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonemonday().execute();
                                            break;

                                    }
                                    break;
                                case 1: //tuesday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonetuesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonetuesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonetuesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonetuesday().execute();
                                            break;
                                    }
                                    break;
                                case 2:  //wednesday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonewednesday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonewednesday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonewednesday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonewednesday().execute();
                                            break;
                                    }
                                    break;
                                case 3: // thursday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonethursday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonethursday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonethursday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonethursday().execute();
                                            break;
                                    }
                                    break;
                                case 4: //friday for all odd sem mech b
                                    switch (y) {
                                        case 1:
                                            new Asyncfmechbonefriday().execute();
                                            break;
                                        case 3:
                                            new Asyncsmechbonefriday().execute();
                                            break;
                                        case 5:
                                            new Asynctmechbonefriday().execute();
                                            break;
                                        case 7:
                                            new Asyncfrmechbonefriday().execute();
                                            break;
                                    }
                                    break;

                            }
                        }
                        break;
                    }

                }
                break;

            }
        }

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                switch (position) {
                    case 0: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 1: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 2: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 3: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 4: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 5: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 6: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }
                    case 7: {
                        Toast.makeText(ttperiod.this, "Have a Great Day", Toast.LENGTH_SHORT).show();
                        break;
                    }


                }

            }
        });


    }

    public class Asyncfautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);
            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonethursay) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfchembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncfcsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncfcsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfcsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fcsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fecectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfeeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : feeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfitbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncfmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fmechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncschematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asynctautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asynctbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asynctbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautotwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncfrautotwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautotwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncfrbiotechtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchematwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchematwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrciviltwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frciviltwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecectwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecectwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechatwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechatwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwomonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwotuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwotuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwowednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwowednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwothursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbtwofriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }










    //odd sem for second,third and final yr


    public class Asyncsautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncscivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncschemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncschembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : schembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfscseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncscseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : scseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : secebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncseeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : seeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : sitbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsitbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fitaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncsmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asyncsmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : smechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asynctautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }
    public class Asynctbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwothursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctchembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tchembtwofriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tciviltwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctcseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tcseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tecebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncteeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : teeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctitbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : titbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asynctmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : tmechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrautoonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frautoonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }


    public class Asyncfrbiotechonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrbiotechonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frbiotechonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchemaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchemaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrchembonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frchembonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcivilonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcivilonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcsebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcsebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrcseconefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frcseconefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreceaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freceaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrecebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frecebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrececonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frececonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeatwomonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeeaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeeaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfreeebonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : freeebonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfritbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : fritbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechaonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechaonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonemonday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonemonday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonetuesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonetuesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonewednesday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonewednesday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonethursday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonethursday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

    public class Asyncfrmechbonefriday extends AsyncTask<Void, String, String> {

        ArrayAdapter<String> arrayAdapter;
        ProgressBar progressBar;
        int count;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            arrayAdapter = (ArrayAdapter<String>) listView.getAdapter();
            progressBar = (ProgressBar) findViewById(R.id.progressBart);

            progressBar.setMax(10);
            progressBar.setProgress(0);
            progressBar.setVisibility(View.VISIBLE);
            count = 0;

        }

        @Override
        protected String doInBackground(Void... voids) {

            for (String value : frmechbonefriday) {
                publishProgress(value);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

            }
            return "Added successfully";
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);

            arrayAdapter.add(values[0]);
            count++;
            progressBar.setProgress(count);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            progressBar.setVisibility(View.INVISIBLE);
        }
    }

}































































































































































































